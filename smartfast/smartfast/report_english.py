# -*- coding:utf-8 -*-

import os
import time
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image, PageBreak, Table, TableStyle
from reportlab.platypus.flowables import Macro
from reportlab.lib.styles import ParagraphStyle, getSampleStyleSheet
from reportlab.lib.units import mm
from reportlab.lib import colors
from reportlab.lib.enums import TA_CENTER, TA_LEFT
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.graphics.charts.piecharts import Pie
from reportlab.graphics.shapes import Drawing, Rect
from reportlab.graphics.charts.textlabels import Label
from reportlab.graphics.charts.legends import Legend
from collections import OrderedDict
from reportlab.lib.enums import TA_JUSTIFY

pdfmetrics.registerFont(TTFont('hei', "MSYH.TTC"))
pdfmetrics.registerFont(TTFont('roman', "simsun.ttc"))
pdfmetrics.registerFont(TTFont('heiti', "simhei.ttf"))
pdfmetrics.registerFont(TTFont('roman', "times.ttf"))
month_convert = {'1月':'January','2月':'February','3月':'March','4月':'April','5月':'May','6月':'June','7月':'July','8月':'August','9月':'September','10月':'October','11月':'November','12月':'December'}

time_start = None
auditid = None

class NumberedCanvasEnglish(canvas.Canvas):
    def __init__(self, *args, **kwargs):
        canvas.Canvas.__init__(self, *args, **kwargs)
        self._codes = []
    def showPage(self):
        self._codes.append({'code': self._code, 'stack': self._codeStack})
        self._startPage()
    def save(self):
        """add page info to each page (page x of y)"""
        # reset page counter 
        self._pageNumber = 0
        global time_start, auditid

        if '月' in time.strftime('%b', time_start):
            time_ym = month_convert[time.strftime('%b', time_start)]+' '+time.strftime('%Y', time_start)
        else:
            time_ym = time.strftime('%b', time_start)+' '+time.strftime('%Y', time_start)
        for code in self._codes:
            # recall saved page
            self._code = code['code']
            self._codeStack = code['stack']
            if self._pageNumber == 0:
                self.drawImage(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'report_english/report-positive.jpg'),0,0,A4[0],A4[1])
                self.setFillColorRGB(1,1,1) #choose your font colour
                self.setFont("hei", 20) #choose your font type and font size
                self.drawString(177, 396, 'Num: '+ auditid)
                self.drawString(177, 346, 'Date: '+ time.strftime("%Y-%m-%d", time_start))
            elif self._pageNumber == len(self._codes)-1:
                self.drawImage(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'report_english/report-back.jpg'),0,0,A4[0],A4[1])
            else:
                self.setFillColorRGB(0.15,0.42,0.65)#37,107,166
                self.setStrokeColorRGB(0.15,0.42,0.65)
                self.rect(65, 775, 20, 50, stroke=1, fill=1)
                self.setFont("hei", 12) #choose your font type and font size
                self.drawString(90, 802, 'Smart Contract Audit Report')
                self.drawString(90, 780, time_ym)
                self.drawImage(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'report_english/logo.jpg'), 275, 780, width=100,height=40)
                self.drawImage(os.path.join(os.path.dirname(os.path.abspath(__file__)), 'report_english/yemei.jpg'), 385, 785, width=140,height=30)
                self.line(180,775,530,775)
                self.setFont("hei", 10.5)
                self.drawCentredString(295, 30,
                    "%(this)i / %(end)i" % {
                       'this': self._pageNumber,
                       'end': len(self._codes)-2,
                    }
                )
            canvas.Canvas.showPage(self)
        canvas.Canvas.save(self)


class ReportEnglish():

	title_style = ParagraphStyle(name="TitleStyle", fontName="hei", fontSize=14, alignment=TA_LEFT,leading=20,spaceAfter=10,spaceBefore=10,textColor=colors.HexColor(0x256BA6),)
	sub_title_style = ParagraphStyle(name="SubTitleStyle", fontName="hei", fontSize=12,
	                                      textColor=colors.HexColor(0x256BA6), alignment=TA_LEFT, spaceAfter=7,spaceBefore=2,)
	sub_sub_title_style = ParagraphStyle(name="SubTitleStyle", fontName="hei", fontSize=12,
	                                      textColor=colors.black, alignment=TA_LEFT, spaceAfter=8,spaceBefore=5,)
	sub_title_style_romanbold = ParagraphStyle(name="SubTitleStyleRomanbold", fontName="hei", fontSize=12,
	                                      textColor=colors.HexColor(0x256BA6), alignment=TA_LEFT, spaceAfter=7,spaceBefore=2,)
	content_daoyin_style = ParagraphStyle(name="ContentDaoyinStyle", fontName="hei", fontSize=12, leading=20,
	                                    wordWrap = 'CJK', firstLineIndent = 24)
	content_daoyin_style_red = ParagraphStyle(name="ContentDaoyinStyleRed", fontName="hei", fontSize=12, leading=20,
	                                    wordWrap = 'CJK', textColor=colors.red)
	content_style = ParagraphStyle(name="ContentStyle", fontName="roman", fontSize=12, leading=20, alignment=TA_JUSTIFY,
	                                    wordWrap = 'CJK', firstLineIndent = 24)
	content_style_noindent = ParagraphStyle(name="ContentStyleNoindent", fontName="roman", fontSize=12, leading=20,
	                                    wordWrap = 'CJK')
	content_style_roman = ParagraphStyle(name="ContentStyleRoman", fontName="roman", fontSize=12, leading=20,
	                                    wordWrap = 'CJK', firstLineIndent = 24)
	content_style_codeadd = ParagraphStyle(name="ContentStyle", fontName="roman", fontSize=10.5, leading=20,
	                                    wordWrap = 'CJK', firstLineIndent = 24)
	content_style_red = ParagraphStyle(name="ContentStyleRed", fontName="roman", fontSize=12, leading=20,
	                                    wordWrap = 'CJK', firstLineIndent = 24, textColor=colors.red)
	foot_style = ParagraphStyle(name="FootStyle", fontName="hei", fontSize=10.5, textColor=colors.HexColor(0xB4B4B4),
	                                 leading=25, spaceAfter=20, alignment=TA_CENTER, )
	table_title_style = ParagraphStyle(name="TableTitleStyle", fontName="hei", fontSize=10.5, leading=20,
	                                        spaceAfter=2, alignment=TA_CENTER, )
	graph_title_style = ParagraphStyle(name="GraphTitleStyle", fontName="hei", fontSize=10.5, leading=20,
	                                        spaceBefore=7, alignment=TA_CENTER, )
	sub_table_style = ParagraphStyle(name="SubTableTitleStyle", fontName="hei", fontSize=10.5, leading=25,
	                                        spaceAfter=10, alignment=TA_LEFT, )
	code_style = ParagraphStyle(name="CodeStyle", fontName="hei", fontSize=9.5, leading=12,
	                                        spaceBefore=5, spaceAfter=5, alignment=TA_LEFT,borderWidth=0.3,borderColor = colors.HexColor(0x256BA6), wordWrap = 'CJK', )
	basic_style = TableStyle([('FONTNAME', (0, 0), (-1, -1), 'hei'),
	                               ('FONTSIZE', (0, 0), (-1, -1), 12),
	                               ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
	                               ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
	                               ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
	                               # 'SPAN' (列,行)坐标
	                               ('SPAN', (1, 0), (3, 0)),
	                               ('SPAN', (1, 1), (3, 1)),
	                               ('SPAN', (1, 2), (3, 2)),
	                               ('SPAN', (1, 5), (3, 5)),
	                               ('SPAN', (1, 6), (3, 6)),
	                               ('SPAN', (1, 7), (3, 7)),
	                               ('GRID', (0, 0), (-1, -1), 0.5, colors.black),
	                               ])
	common_style = TableStyle([('FONTNAME', (0, 0), (-1, 0), 'hei'),
	                           ('FONTNAME', (1, 1), (-1, -1), 'roman'),
	                           ('FONTNAME', (0, 1), (0, -1), 'hei'),
	                              ('FONTSIZE', (0, 0), (-1, -1), 12),
	                              ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
	                              ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
	                              ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
	                           ('LINEBEFORE', (0, 0), (0, -1), 0.1, colors.grey),  
	                              ('GRID', (0, 0), (-1, -1), 0.1, colors.grey),
	                           ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),  
	                           ('TEXTCOLOR', (0, 1), (-1, -1), colors.black),
	                           ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#4472c4')),  
	                            ('BACKGROUND', (0, 1), (-1, 1), colors.HexColor('#d9e2f3')),  
	                           ('BACKGROUND', (0, 3), (-1, 3), colors.HexColor('#d9e2f3')),
	                           ('BACKGROUND', (0, 5), (-1, 5), colors.HexColor('#d9e2f3')),
	                           ('BACKGROUND', (0, 7), (-1, 7), colors.HexColor('#d9e2f3')),
	                             ])
	common_style_1 = TableStyle([('FONTNAME', (0, 0), (-1, 0), 'hei'),
	                           ('FONTNAME', (0, 1), (0, -1), 'hei'),
	                           ('FONTNAME', (1, 1), (-1, -1), 'roman'),
	                              ('FONTSIZE', (0, 0), (-1, -1), 12),
	                              ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
	                              ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
	                              ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
	                           ('LINEBEFORE', (0, 0), (0, -1), 0.1, colors.grey),
	                              ('GRID', (0, 0), (-1, -1), 0.1, colors.grey),
	                           ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),  
	                           ('TEXTCOLOR', (0, 1), (0, -1), colors.HexColor('#E61A1A')),
	                             ('TEXTCOLOR', (1, 1), (1, -1), colors.HexColor('#FF6600')),
	                             ('TEXTCOLOR', (2, 1), (2, -1), colors.HexColor('#DDB822')),
	                             ('TEXTCOLOR', (3, 1), (3, -1), colors.HexColor('#ff66ff')),
	                             ('TEXTCOLOR', (4, 1), (4, -1), colors.HexColor('#22DDDD')),
	#                              ('TEXTCOLOR', (5, 1), (5, -1), colors.HexColor('#2BD591')),
	                           ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#4472c4')), 
	                            ('BACKGROUND', (0, 1), (-1, 1), colors.HexColor('#d9e2f3')),  
	                             ('SPAN', (0, 0), (-1, 0)),
	                             ])
	common_style_result_all_type = [
	                            ('FONTNAME', (0, 0), (-1, 0), 'hei'),
	                            ('FONTNAME', (0, 1), (0, -1), 'roman'),
	                           ('FONTNAME', (1, 1), (1, -1), 'hei'),
	                           ('FONTNAME', (2, 1), (4, -1), 'roman'),
	                            ('FONTNAME', (5, 1), (5, -1), 'hei'),
	                              ('FONTSIZE', (0, 0), (-1, -1), 9),
	                              # ('FONTSIZE', (2, 0), (2, -1), 7.5),
	                              ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
	                              ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
	                              ('BOTTOMPADDING', (0, 0), (-1, -1), 6),
	                           ('LINEBEFORE', (0, 0), (0, -1), 0.1, colors.grey),  
	                              ('GRID', (0, 0), (-1, -1), 0.1, colors.grey),
	                           ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),  
	                           ('TEXTCOLOR', (0, 1), (2, -1), colors.black),
	                            ('TEXTCOLOR', (4, 1), (4, -1), colors.black),
	                            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#4472c4'))  
	                             ]
	table_result = [['ID', 'Pattern', 'Description', 'Severity', 'Confidence', 'Status/Num', 'Description', 'Scenarios', 'Scenarios_supplement', 'Recommendation'], [1, 'abiencoderv2-array', 'ABI encoding error', 'High', 'exactly', 'Pass', 'The solc 0.4.7-0.5.10 version contains a compiler error that causes the incorrect use of the ABI encoder.', 'contract A {<br/>&#160;&#160;&#160;&#160;uint[2][3] bad_arr = [[1, 2], [3, 4], [5, 6]];<br/>&#160;&#160;&#160;&#160;/* Array of arrays passed to abi.encode is vulnerable */<br/>&#160;&#160;&#160;&#160;function bad() public {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bytes memory b = abi.encode(bad_arr);<br/>&#160;&#160;&#160;&#160;}<br/>}', 'When the compiler version is 0.4.7-0.5.10, because abi.encode (bad_arr) is used in bad(), calling bad() will incorrectly encode the array as [[1, 2], [2, 3], [3, 4]], and cause unexpected behavior.', 'Use compiled version >= 0.5.10.'], [2, 'array-by-reference', 'Storage parameter usage', 'High', 'exactly', 'Pass', 'Detect the function (reference) that passes the storage array to the storage function.', 'contract Memory {<br/>&#160;&#160;&#160;&#160;uint[1] public x; // storage<br/>&#160;&#160;&#160;&#160;function f() public {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;f1(x); // update x<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;f2(x); // do not update x<br/>&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;function f1(uint[1] storage arr) internal { // by reference<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;arr[0] = 1;<br/>&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;function f2(uint[1] arr) internal { // by value<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;arr[0] = 2;<br/>&#160;&#160;&#160;&#160;}<br/>}', 'Bob calls f(). It stands to reason that at the end of the call, Bob x[0] is 2, but it is 1. Therefore, Bob used the contract incorrectly.', 'Make sure to use memory and storage correctly in the function parameters and make all positions clear.'], [3, 'multiple-constructors', 'Multiple constructors in a contract', 'High', 'exactly', 'Pass', 'Detect multiple constructor definitions in the same contract (using old and new schemes).', 'contract A {<br/>&#160;&#160;&#160;&#160;uint x;<br/>&#160;&#160;&#160;&#160;constructor() public {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;x = 0;<br/>&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;function A() public {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;x = 1;<br/>&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;function test() public returns(uint) {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return x;<br/>&#160;&#160;&#160;&#160;}<br/>}', 'In Solidity 0.4.22, a contract with two constructor schemes will be compiled at the same time. The first constructor will take precedence over the second, which may be unexpected. Therefore, special attention should be paid to Solidity 0.4.22.', 'Only declare a constructor, it is better to use the new scheme constructor (...) instead of the function <contractName> (...).'], [4, 'names-reused', 'Check contract name reuse', 'High', 'exactly', 'Pass', 'If a code base has two contracts with similar names, the compilation artifact will not contain one of the contracts with duplicate names.', 'contract B{<br/>&#160;&#160;&#160;&#160;constructor() {<br/>&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;function ceshi1() {}<br/>}<br/>contract B{<br/>&#160;&#160;&#160;&#160;constructor() {<br/>&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;function ceshi2() {}<br/>}', 'Bob\'s code base has two contracts called "ERC20". When the code base is running, only one of the two contracts will be compiled in "build/contracts". As a result, the second contract cannot be analyzed.', 'Rename the contract.'], [5, 'public-mappings-nested', 'Struct sets the nested structure of struct', 'High', 'exactly', 'Pass', 'Before Solidity 0.5, public maps with nested structures (struct sets of struct) returned incorrect values.', 'contract TestNestedStructInMapping {<br/>&#160;&#160;&#160;&#160;// The struct that is nested.<br/>&#160;&#160;&#160;&#160;struct structNested {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uint dummy;<br/>&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;// The struct that holds the nested struct.<br/>&#160;&#160;&#160;&#160;struct structMain {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;structNested gamePaymentsSummary;<br/>&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;// The map that maps a game ID to a specific game.<br/>&#160;&#160;&#160;&#160;mapping(uint256 => structMain) public s_mapOfNestedStructs;<br/>}', "It does work in 0.4.25. However, adding another variable to the structure still does not make 0.4.25 error, but the generated code is wrong-it only returns 32 bytes instead of 64 bytes. Bob interacts with a publicly mapped contract with a nested structure. The value returned by the mapping is incorrect (64 bytes are returned as 32 bytes), destroying Bob's use.", 'Do not use public mapping with nested structures (struct sets struct).'], [6, 'rtlo', 'Overwritten from right to left', 'High', 'exactly', 'Pass', 'Malicious actors can use Unicode characters (U+202E) overlaid from right to left to force the rendering of RTL text and enable users to achieve the true intention of confusing the contract.', 'contract Token<br/>{<br/>&#160;&#160;&#160;&#160;address payable o; // owner<br/>&#160;&#160;&#160;&#160;mapping(address => uint) tokens;<br/>&#160;&#160;&#160;&#160;function withdraw() external returns(uint)<br/>&#160;&#160;&#160;&#160;{<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uint amount = tokens[msg.sender];<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;address payable d = msg.sender;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;token/*noitanitsed*/ d, o/*\u202d\u202c\u202c<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/*value */, amount);<br/>&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;function _withdraw(address payable fee_receiver, address payable destination, uint value) internal<br/>&#160;&#160;&#160;&#160;{<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;fee_receiver.transfer(1);<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;destination.transfer(value);<br/>&#160;&#160;&#160;&#160;}<br/>}', 'When calling `_withdraw`, `Token` uses right-to-left overwriting characters (the small box above contains overwriting characters). As a result, the fee was erroneously sent to `msg.sender`, and the token balance was sent to the owner.', 'Special control characters are not allowed.'], [7, 'shadowing-state', 'Check state variable hiding', 'High', 'exactly', 'Pass', 'Robustness allows ambiguous naming of state variables when using inheritance. When there are multiple definitions at the contract and functional level, state variable hiding may also occur within a single contract.', 'contract BaseContract{<br/>&#160;&#160;&#160;&#160;address owner;<br/>&#160;&#160;&#160;&#160;modifier isOwner(){<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;require(owner == msg.sender);<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;_;<br/>&#160;&#160;&#160;&#160;}<br/>}<br/>contract DerivedContract is BaseContract{<br/>&#160;&#160;&#160;&#160;address owner;<br/>&#160;&#160;&#160;&#160;constructor(){<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;owner = msg.sender;<br/>&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;function withdraw() isOwner() external{<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;msg.sender.transfer(this.balance);<br/>&#160;&#160;&#160;&#160;}<br/>}', "The `owner` of `BaseContract` will not be specified, and the modifier `isOwner` has no effect. '''", 'Avoid declaring the same variable. In contract inheritance, you can modify the name or write it to the constructor to re-assign if necessary, etc.'], [8, 'suicidal', 'Check if anyone can break the contract', 'High', 'exactly', 'Pass', 'Due to lack of access control or insufficient access control, malicious parties can self-destruct the contract. Calling selfdestruct/suicide lacks protection.', 'contract Suicidal{<br/>&#160;&#160;&#160;&#160;function kill() public{<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;selfdestruct(msg.sender);<br/>&#160;&#160;&#160;&#160;}<br/>}', 'Bob calls the "kill" function and breaks the contract.', 'Protect access to all sensitive functions.'], [9, 'uninitialized-state', 'Check for uninitialized state variables', 'High', 'exactly', 'Pass', 'Uninitialized state variables can lead to intentional or unintentional vulnerabilities.', 'contract Uninitialized{<br/>&#160;&#160;&#160;&#160;address destination;<br/>&#160;&#160;&#160;&#160;function transfer() payable public{<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;destination.transfer(msg.value);<br/>&#160;&#160;&#160;&#160;}<br/>}', 'Bob calls "transfer". As a result, the ether is sent to the address "0x0" and is lost.', 'Initialize all variables. If you want to initialize a variable to zero, set it explicitly to zero.'], [10, 'uninitialized-storage', 'Check for uninitialized storage variables', 'High', 'exactly', 'Pass', 'Local variables are not initialized. The initialized storage variable will be used as a reference to the first state variable, and key variables can be overwritten.', 'contract Uninitialized{<br/>&#160;&#160;&#160;&#160;address owner = msg.sender;<br/>&#160;&#160;&#160;&#160;struct St{<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uint a;<br/>&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;function func() {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;St st;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;st.a = 0x0;<br/>&#160;&#160;&#160;&#160;}<br/>}', 'Bob calls `func`. As a result, "owner" is overwritten with "0".', 'Should initialize the entire storage variable, struct, class, etc., use the initialization method of the structure, or add memory.'], [11, 'unprotected-upgrade', 'Break the logic of the contract', 'High', 'exactly', 'Pass', 'Detect logical contracts that can be broken.', 'contract Buggy is Initializable{<br/>&#160;&#160;&#160;&#160;address payable owner;<br/><br/>&#160;&#160;&#160;&#160;function initialize() external initializer{<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;require(owner == address(0));<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;owner = msg.sender;<br/>&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;function kill() external{<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;require(msg.sender == owner);<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;selfdestruct(owner);<br/>&#160;&#160;&#160;&#160;}<br/>}', 'Buggy is a renewable contract. Anyone can call initialize on the logic contract and destroy the contract.', 'Add a constructor to ensure that initialize cannot be called on the logical contract.'], [12, 'visibility', 'Check visibility level error', 'High\\Info', 'exactly', 'Pass', 'The default function visibility level in the contract is public, and in interfaces-external, the default visibility level of state variables is internal. In the contract, the fallback function can be external or public. In the interface, all functions should be declared as external functions. Clearly define function visibility to prevent confusion. Specifically, before version 0.5.0: look for fallback functions without explicit visibility declaration and delete them, look for fallback functions that are neither external nor public, look for constructors with external or private visibility, in the interface Find internal and private functions; after version 0.5.0: Find non-external functions in the interface.', 'pragma solidity ^0.4.24;<br/>interface D {<br/>&#160;&#160;&#160;&#160;function foo() private;<br/>&#160;&#160;&#160;&#160;function foo1() public;<br/>}<br/>contract C {<br/>&#160;&#160;&#160;&#160;address kk;<br/>&#160;&#160;&#160;&#160;constructor() private {<br/>&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;function aa() public{<br/>&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;function() {<br/>&#160;&#160;&#160;&#160;}<br/>}', '', 'The visibility should be modified according to the requirements of the compiler.'], [13, 'redundant-fallback', 'Check for redundant fallback functions', 'High\\Opt', 'exactly', 'Pass', 'Starting from Solidity 0.4.0, contracts that do not have a rollback function will automatically restore the payment, making the payment refusal to roll back redundant. But below 0.4, there is no fallback function that is prone to reentrance loopholes, which is very dangerous.', 'pragma solidity 0.3.24;<br/>contract Crowdsale {<br/>}', 'A malicious user writes a fallback function to attack the contract.', 'There is nothing wrong with writing more fallback functions, just add a bit of compilation gas, but the awareness of writing fallback functions still needs to be encouraged.'], [14, 'arbitrary-send', 'Check if Ether can be sent to any address', 'High', 'probably', 'Pass', 'The call to the function that sends Ether to an arbitrary address has not been reviewed.', 'contract ArbitrarySend{<br/>&#160;&#160;&#160;&#160;address destination;<br/>&#160;&#160;&#160;&#160;function setDestination(){<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;destination = msg.sender;<br/>&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;function withdraw() public{<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;destination.transfer(this.balance);<br/>&#160;&#160;&#160;&#160;}<br/>}', 'Bob calls setDestination and withdraw, and as a result, he withdraws the balance of the contract.', 'Ensure that no user can withdraw unauthorized funds.'], [15, 'continue-in-loop', 'Continue causes an infinite loop', 'High', 'probably', 'Pass', 'continue will cause the loop judgment condition to fail to increment, resulting in an infinite loop.', 'contract C {<br/>&#160;&#160;&#160;&#160;function f(uint a, uint b) public{<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uint a = 0;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;do {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;a++;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} while(a<10);<br/>&#160;&#160;&#160;&#160;}<br/>}', '', 'Check whether the increment variable is skipped.'], [16, 'controlled-array-length', 'Length is allocated directly', 'High', 'probably', 'Pass', 'Detect direct allocation of array length.', 'contract A {<br/>&#160;&#160;&#160;&#160;uint[] testArray; // dynamic size array<br/>&#160;&#160;&#160;&#160;function f(uint usersCount) public {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// ...<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;testArray.length = usersCount;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// ...<br/>&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;function g(uint userIndex, uint val) public {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// ...<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;testArray[userIndex] = val;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// ...<br/>&#160;&#160;&#160;&#160;}<br/>}', 'Contract storage/state variables are indexed by 256-bit integers. Users can set the array length to 2 ** 256-1 to index all storage slots. In the above example, you can call function f to set the length of the array, and then call function g to control any storage slots needed. Please note that the storage slots here are indexed by the hash of the indexer. Nonetheless, all storage will still be accessible and can be controlled by an attacker.', 'It is not allowed to set the length of the array directly; instead, choose to add values as needed. Otherwise, please check the contract thoroughly to ensure that the user-controlled variables cannot reach the array length allocation.'], [17, 'controlled-delegatecall', 'The delegate address out of control', 'High', 'probably', 'Pass', 'Delegate the call or call code to an address controlled by the user. The address of Delegatecall is not necessarily trusted, it is still a problem of access control, and the address is not checked.', 'contract Delegatecall{<br/>&#160;&#160;&#160;&#160;function delegate(address to, bytes data){<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;to.delegatecall(data);<br/>&#160;&#160;&#160;&#160;}<br/>}', 'Bob calls `delegate` and delegates the execution of the malicious contract to him. As a result, Bob withdraws the funds from the contract and destroys the contract.', 'Avoid using `delegatecall`. If you use it, please only target trusted destinations.'], [18, 'incorrect-constructor', 'Check the constructor name error', 'High', 'probably', 'Pass', 'The constructor is a special function and can only be called once during contract creation. They usually perform key privileged operations, such as setting up contract owners. Before Solidity 0.4.22, the only way to define a constructor was to create a function with the same name as the contract class that contained it. If its name does not exactly match the contract name, the function intended to be the constructor will become a normal callable function. This behavior can sometimes cause security issues, especially when the smart contract code is reused with other names but the name of the constructor has not been changed accordingly.', 'contract Incorrectconstructor {<br/>&#160;&#160;&#160;&#160;address owner;<br/>&#160;&#160;&#160;&#160;function Incorrectconstructo() {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;owner = msg.sender;<br/>&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;modifier ifowner()<br/>&#160;&#160;&#160;&#160;{<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;require(msg.sender == owner);<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;_;<br/>&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;function withdrawmoney() ifowner {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;msg.sender.transfer(address(this).balance);<br/>&#160;&#160;&#160;&#160;}<br/>}', '', 'Please check if the constructor is wrong.'], [19, 'parity-multisig-bug', 'Check for multi-signature vulnerabilities', 'High', 'probably', 'Pass', 'Multi-signature vulnerability. Hackers can use the initWallet function to call the initMultiowned function to obtain the identity of the contract owner.', 'contract WalletLibrary_bad is WalletEvents {<br/>&#160;&#160;&#160;&#160;function initWallet(address[] _owners, uint _required, uint _daylimit) { <br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;initDaylimit(_daylimit); <br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;initMultiowned(_owners, _required);<br/>&#160;&#160;&#160;&#160;}  // kills the contract sending everything to `_to`.<br/>&#160;&#160;&#160;&#160;function initMultiowned(address[] _owners, uint _required) {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;m_numOwners = _owners.length + 1;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;m_owners[1] = uint(msg.sender);<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;m_ownerIndex[uint(msg.sender)] = 1; <br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for (uint i = 0; i < _owners.length; ++i)<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;m_owners[2 + i] = uint(_owners[i]);<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;m_ownerIndex[uint(_owners[i])] = 2 + i;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;m_required = _required;<br/>&#160;&#160;&#160;&#160;}<br/>}', '', 'InitWallet, initDaylimit and initMultiowned add internal limited types to prohibit external calls: or if only_uninitMultiowned (m_numOwners) is detected in initMultiowned, no error will occur. The number of initializations can also be reviewed by judging m_numOwners.'], [20, 'reentrancy-eth', 'Re-entry vulnerabilities (Ethereum theft)', 'High', 'probably', 'Pass', 'A reentrancy error was detected. This is the reentry of ether. Through re-entry, the account balance can be maliciously withdrawn, resulting in losses. Do not report re-reporting that does not involve Ether (please refer to "reentrancy-no-eth")', 'function withdrawBalance(){<br/>&#160;&#160;&#160;&#160;// send userBalance[msg.sender] Ether to msg.sender<br/>&#160;&#160;&#160;&#160;// if mgs.sender is a contract, it will call its fallback function<br/>&#160;&#160;&#160;&#160;if( ! (msg.sender.call.value(userBalance[msg.sender])() ) ){<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;throw;<br/>&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;userBalance[msg.sender] = 0;<br/>}', 'Bob used the reentrance vulnerability to call `withdrawBalance` multiple times and withdrew more than he originally deposited into the contract.', 'Can adopt check-effects-interactions mode.'], [21, 'storage-array', 'Signed integer array problem', 'High', 'probably', 'Pass', 'The solc 0.4.7-0.5.10 version contains a compiler error that causes the values in the signed integer array to be incorrect.', 'contract A {<br/>&#160;&#160;&#160;&#160;int[3] ether_balances; // storage signed integer array<br/>&#160;&#160;&#160;&#160;function bad0() private {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// ...<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ether_balances = [-1, -1, -1];<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// ...<br/>&#160;&#160;&#160;&#160;}<br/>}', 'bad0() uses a (storage-allocated) signed integer array state variable to store the ether balance of three accounts. -1 should indicate uninitialized values, but a Solidity error made them 1 and these values can be used by the account.', 'Use compiler version >= 0.5.10.'], [22, 'weak-prng', 'Modulo problem of parameters', 'High', 'probably', 'Pass', 'The PRNG is weaker due to the modulus of block.timestamp, now or blockhash. These may be affected by miners to some extent, so they should be avoided.', 'contract Game {<br/>&#160;&#160;&#160;&#160;uint reward_determining_number;<br/>&#160;&#160;&#160;&#160;function guessing() external{<br/>&#160;&#160;&#160;&#160;  reward_determining_number = uint256(block.blockhash(10000)) % 10;<br/>&#160;&#160;&#160;&#160;}<br/>}', 'Eve is a miner. Eve calls guessing() and reorders the blocks containing transactions. As a result, Eve won the game.', "Don't use block.timestamp or blockhash as a source of randomness now."], [23, 'assert-violation', 'Check for incorrect use of assertions', 'Medium', 'exactly', 'Pass', 'The Solidity assert() function is used to declare invariants. Normally running code will never reach a failed assert statement. An attainable assertion may mean one of two things: 1. There is an error in the contract that allows it to enter an invalid state. 2. The assert statement is used incorrectly, for example to verify input. ; CWE-670: Always incorrect control flow implementation. The Assert condition can be false, and the definition here is wider. It is best to use requere. Generally used at the end of the function to verify whether there is overflow or something.', 'contract Assertviolation [<br/>&#160;&#160;&#160;&#160;function bad(uint a, uint b){<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert(a>b);<br/>&#160;&#160;&#160;&#160;}<br/>}', '', 'To detect input variables, use the require function.'], [24, 'constructor-return', 'The use of return in the constructor', 'Medium', 'exactly', 'Pass', 'The return statement is used in the constructor of the contract. With return, the deployment process will be different from the intuitive process. For example, the deployed bytecode may not include functions implemented in the source code.', 'pragma solidity 0.4.24;<br/>contract HoneyPot {<br/>&#160;&#160;&#160;&#160;bytes internal constant ID = hex"60203414600857005B60008080803031335AF100";<br/>&#160;&#160;&#160;&#160;constructor () public payable {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bytes memory contract_identifier = ID;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assembly { return(add(0x20, contract_identifier), mload(contract_identifier)) }<br/>&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;function withdraw() public payable {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;require(msg.value >= 1 ether);<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;msg.sender.transfer(address(this).balance);<br/>&#160;&#160;&#160;&#160;}<br/>}', '', 'Do not use the return of assembly in the constructor.'], [25, 'enum-conversion', 'Scope of enumerated types', 'Medium', 'exactly', 'Pass', 'Detect out-of-range enumeration conversion (solc <0.4.5).', 'pragma solidity 0.4.2;<br/>contract Test{<br/>&#160;&#160;&#160;&#160;enum E{a}<br/>&#160;&#160;&#160;&#160;function bug(uint a) public returns(E){<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return E(a);   <br/>&#160;&#160;&#160;&#160;}<br/>}', 'An attacker can trigger unexpected behavior by calling bug(1).', 'Use the latest compiler version. If solc <0.4.5 is required, please check the enumeration conversion range.'], [26, 'erc1155-interface', 'Check the wrong ERC1155 interface', 'Medium', 'exactly', 'Pass', 'The return value of the "ERC1155" function is incorrect. Interacting with these functions, the contract of solidity version> 0.4.22 will not be executed because of the lack of return value.', 'contract Token{<br/>&#160;&#160;&#160;&#160;function balanceOf(address _owner, uint256 _id) external view returns (bool);<br/>&#160;&#160;&#160;&#160;//...<br/>}', "Token.balanceOf does not return the expected uint256. Bob deploys the token. Alice creates a contract to interact with, but assumes that the interface is the correct `ERC1155`. Alice's contract cannot interact with Bob's contract.", 'Set appropriate return values and vtypes for the defined ʻERC1155` function.'], [27, 'erc1410-interface', 'Check the wrong ERC1410 interface', 'Medium', 'exactly', 'Pass', 'The return value of the "ERC1410" function is incorrect. Interacting with these functions, the contract of solidity version> 0.4.22 will not be executed because of the lack of return value.', 'contract Token{<br/>&#160;&#160;&#160;&#160;function isOperator(address _operator, address _tokenHolder) external view returns (uint256);<br/>&#160;&#160;&#160;&#160;//...<br/>}', "Token.isOperator does not return the expected boolean value. Bob deploys the token. Alice creates a contract to interact with, but uses the correct `ERC1410` interface implementation. Alice's contract cannot interact with Bob's contract.", 'Set appropriate return values and vtypes for the defined ʻERC1410` function.'], [28, 'erc20-interface', 'Check for wrong ERC20 interface', 'Medium', 'exactly', 'Pass', 'The return value of the "ERC20" function is incorrect. Interacting with these functions, the contract of solidity version> 0.4.22 will not be executed because of the lack of return value.', 'contract Token{<br/>&#160;&#160;&#160;&#160;function transfer(address to, uint value) external;<br/>&#160;&#160;&#160;&#160;//...<br/>}', "Token.transfer does not return the expected boolean value. Bob deploys the token. Alice creates a contract to interact with, but uses the correct `ERC20` interface implementation. Alice's contract cannot interact with Bob's contract.", 'Set appropriate return values and vtypes for the defined ʻERC20` function.'], [29, 'erc223-interface', 'Check the wrong ERC223 interface', 'Medium', 'exactly', 'Pass', 'The return value of the "ERC223" function is incorrect. Interacting with these functions, the contract of solidity version> 0.4.22 will not be executed because of the lack of return value.', 'contract Token{<br/>&#160;&#160;&#160;&#160;function name() constant returns (uint _name);<br/>&#160;&#160;&#160;&#160;//...<br/>}', "Token.name does not return the expected boolean value. Bob deploys the token. Alice creates a contract to interact with, but uses the correct `ERC223` interface implementation. Alice's contract cannot interact with Bob's contract.", 'Set appropriate return values and vtypes for the defined ʻERC223` function.'], [30, 'erc621-interface', 'Check the wrong ERC621 interface', 'Medium', 'exactly', 'Pass', 'The return value of the "ERC621" function is incorrect. Interacting with these functions, the contract of solidity version> 0.4.22 will not be executed because of the lack of return value.', 'contract Token{<br/>&#160;&#160;&#160;&#160;function decreaseSupply(uint value, address from) external;<br/>&#160;&#160;&#160;&#160;//...<br/>}', "Token.decreaseSupply does not return the expected boolean value. Bob deploys the token. Alice creates a contract to interact with, but uses the correct `ERC621` interface implementation. Alice's contract cannot interact with Bob's contract.", 'Set appropriate return values and vtypes for the defined ʻERC621` function.'], [31, 'erc721-interface', 'Check the wrong ERC721 interface', 'Medium', 'exactly', 'Pass', 'The return value of the "ERC721" function is incorrect. Interacting with these functions, the contract of solidity version> 0.4.22 will not be executed because of the lack of return value.', 'contract Token{<br/>&#160;&#160;&#160;&#160;function ownerOf(uint256 _tokenId) external view returns (bool);<br/>&#160;&#160;&#160;&#160;//...<br/>}', "Token.ownerOf does not return the expected boolean value. Bob deploys the token. Alice creates a contract to interact with, but uses the correct `ERC721` interface implementation. Alice's contract cannot interact with Bob's contract.", 'Set appropriate return values and vtypes for the defined ʻERC721` function.'], [32, 'erc777-interface', 'Check the wrong ERC777 interface', 'Medium', 'exactly', 'Pass', 'The return value of the "ERC777" function is incorrect. Interacting with these functions, the contract of solidity version> 0.4.22 will not be executed because of the lack of return value.', 'contract Token{<br/>&#160;&#160;&#160;&#160;function defaultOperators() public view returns (address);<br/>&#160;&#160;&#160;&#160;//...<br/>}', "Token.defaultOperators does not return the expected boolean value. Bob deploys the token. Alice creates a contract to interact with, but uses the correct `ERC777` interface implementation. Alice's contract cannot interact with Bob's contract.", 'Set appropriate return values and vtypes for the defined ʻERC777` function.'], [33, 'erc875-interface', 'Check the wrong ERC875 interface', 'Medium', 'exactly', 'Pass', 'The return value of the "ERC875" function is incorrect. Interacting with these functions, the contract of solidity version> 0.4.22 will not be executed because of the lack of return value.', 'contract Token{<br/>&#160;&#160;&#160;&#160;function balanceOf(address _owner) public view returns (string _balances);<br/>&#160;&#160;&#160;&#160;//...<br/>}', "Token.balanceOf does not return the expected boolean value. Bob deploys the token. Alice creates a contract to interact with, but uses the correct `ERC875` interface implementation. Alice's contract cannot interact with Bob's contract.", 'Set appropriate return values and vtypes for the defined ʻERC875` function.'], [34, 'incorrect-equality', 'Check the strict equality of danger', 'Medium', 'exactly', 'Pass', 'Using strict equality (== and !=), an attacker can easily manipulate these equality. Specifically: the opponent can forcefully send Ether to any address through selfdestruct() or through mining, thereby invalidating the strict judgment.', 'contract Crowdsale{<br/>&#160;&#160;&#160;&#160;function fund_reached() public returns(bool){<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return this.balance == 100 ether;<br/>&#160;&#160;&#160;&#160;}<br/>}', 'Crowdsale relies on fund_reached to know when to stop the sale of tokens. Bob sends 0.1 ether. As a result, fund_reached is always false, and crowdsale is always true.', 'Do not use strict equality to determine whether an account has enough ether or tokens.'], [35, 'incorrect-signature', 'Check for incorrect function signatures', 'Medium', 'exactly', 'Pass', 'In Solidity, the definition of a function signature is: a basic prototype canonical expression without a data position specifier, that is, a function name with a bracketed parameter type list. The parameter types are separated by a comma without spaces. This means uint256 and int256 should be used instead of uint or int. For example: in bytes4 (keccak256(<signature>)), signatrue should be unit256 or int256, not uint or int, otherwise the length is not enough.', 'pragma solidity ^0.5.1;<br/>contract Signature {<br/>&#160;&#160;&#160;&#160;function callFoo(address addr, uint value) public returns (bool) {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bytes memory data = abi.encodeWithSignature("foo(uint)", value);<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(bool status, ) = addr.call(data);<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return status;<br/>&#160;&#160;&#160;&#160;}<br/>}', '', 'Carefully check the parameter type of the signature function to ensure that it is consistent with the type required by the signature.'], [36, 'locked-ether', 'Whether the contract ether is locked', 'Medium', 'exactly', 'Pass', 'A contract programmed to receive ether (with the payable logo) should implement the method of withdrawing ether, that is, call transfer (recommended), send or call.value at least once.', 'pragma solidity 0.4.24;<br/>contract Locked{<br/>&#160;&#160;&#160;&#160;function receive() payable public{}<br/>}', 'All Ether sent to "Locked" will be lost.', 'Delete payable attributes or add withdrawal functions.'], [37, 'mapping-deletion', 'Delete the mapped structure problem', 'Medium', 'exactly', 'Pass', 'Deleting in a structure that contains a mapping will not delete the mapping (see Solidity documentation). The remaining data can be used to break the contract.', 'struct BalancesStruct{<br/>&#160;&#160;&#160;&#160;address owner;<br/>&#160;&#160;&#160;&#160;mapping(address => uint) balances;<br/>}<br/>mapping(address => BalancesStruct) public stackBalance;<br/>function remove() internal{<br/>&#160;&#160;&#160;&#160; delete stackBalance[msg.sender];<br/>}', 'Remove() deletes one item of stackBalance. The mapped balances will never be deleted, so remove() will not work properly.', 'Use tag lock, or delete the mapping first.'], [38, 'shadowing-abstract', 'State variables from the abstract contract', 'Medium', 'exactly', 'Pass', 'Detect hidden state variables in abstract contracts. Unlike shadowing-state, hidden state variables that are not used in the parent contract are detected here.', 'contract BaseContract{<br/>&#160;&#160;&#160;&#160;address owner;<br/>}<br/>contract DerivedContract is BaseContract{<br/>&#160;&#160;&#160;&#160;address owner;<br/>}', 'The owner of BaseContract is in the hidden variable of DerivedContract.', 'Delete state hidden variables.'], [39, 'tautology', 'Check for tautologies or contradictions', 'Medium', 'exactly', 'Pass', 'Detecting tautology or contradictory expressions means that if, while, require, and assert conditions are always true or false.', 'contract A {<br/>&#160;&#160;&#160;&#160;function f(uint x) public {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// ...<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (x >= 0) { // bad -- always true<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// ...<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// ...<br/>&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;function g(uint8 y) public returns (bool) {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// ...<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return (y < 512); // bad!<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// ...<br/>&#160;&#160;&#160;&#160;}<br/>}', 'x is uint256, so x>= 0 will always be true. y is uint8, so y <512 will always be true.', 'Fix incorrect comparisons by changing the comparison or changing the value type.'], [40, 'default-return-value', 'Function returns only default value', 'Medium', 'probably', 'Pass', 'If a function is declared to have a return value, but no return value is given to it in the end, a default return value will be generated, and the default return value and the return value after actual execution may be different.', 'contract C{<br/>&#160;&#160;&#160;&#160;function bad_return() public returns(bool flag){<br/>&#160;&#160;&#160;&#160; &#160;&#160;&#160;&#160;address aa = msg.sender;<br/>&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;function bad_return1() public returns(bool){<br/>&#160;&#160;&#160;&#160; &#160;&#160;&#160;&#160;address aa = msg.sender;<br/>&#160;&#160;&#160;&#160;}<br/>}', '', 'Functions with return values should return or change the return value.'], [41, 'boolean-cst', 'Check for misuse of Boolean constants', 'Medium', 'probably', 'Pass', 'Detect abuse of Boolean constants. Bool variable is used incorrectly, here is the operation of bool variable.', 'contract A {<br/>&#160;&#160;&#160;&#160;function f(uint x) public {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// ...<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (false) { // bad!<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; &#160;&#160;&#160;&#160;// ...<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// ...<br/>&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;function g(bool b) public returns (bool) {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// ...<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return (b || true); // bad!<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// ...<br/>&#160;&#160;&#160;&#160;}<br/>}', 'The Boolean constants in the code have very few legal uses. Other uses (as conditions in complex expressions) indicate the persistence of errors or error codes.', 'Verify and simplify the conditions.'], [42, 'constant-function-state', 'Check Constant function to change state', 'Medium', 'probably', 'Pass', 'Functions declared as constant/pure/view will change their state. Constant/pure/view was not enforced before Solidity 0.5. Starting from Solidity 0.5, calls to constant/pure/view functions use the STATICCALL opcode, which is restored when the state is modified. As a result, calls to incorrectly labeled functions may catch contracts compiled with Solidity 0.5.', 'contract Constant{<br/>&#160;&#160;&#160;&#160;uint counter;<br/>&#160;&#160;&#160;&#160;function get() public view returns(uint){<br/>&#160;&#160;&#160;&#160; &#160;&#160;&#160;&#160;counter = counter +1;<br/>&#160;&#160;&#160;&#160; &#160;&#160;&#160;&#160;return counter<br/>&#160;&#160;&#160;&#160;}<br/>}', "Constant is deployed as Solidity 0.4.25. Bob wrote a smart contract that interacts with Constant in Solidity 0.5.0. All calls to get will be restored, thus destroying Bob's smart contract execution.", 'Ensure that the properties of the contract compiled before Solidity 0.5.0 are correct.'], [43, 'divide-before-multiply', 'Imprecise order of arithmetic operations', 'Medium', 'probably', 'Pass', 'Entities only support integers, so division is often truncated; performing multiplication before division can sometimes avoid loss of precision, and entity integer division may be truncated. As a result, performing multiplication before division may reduce accuracy.', 'contract A {<br/>&#160;&#160;&#160;&#160;function f(uint n) public {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;coins = (oldSupply / n) * interest;<br/>&#160;&#160;&#160;&#160;}<br/>}', 'If n is greater than oldSupply, coins will be zero. For example, oldSupply = 5; n = 10, interest = 2, coins will be zero. If (oldSupply * interest / n) is used, the coin will be 1. In general, it is usually best to rearrange the arithmetic to perform the multiplication before the division, unless a smaller type of restriction makes this operation dangerous.', 'Consider the operation of multiplication before division.'], [44, 'erc20-approve', 'ERC-20 advance attack (TOD)', 'Medium', 'probably', 'Pass', 'The approve function of ERC-20 is vulnerable to attack. Using a preemptive attack, the approved tokens can be spent before changing the quota value. This attack is also a type of transaction sequence dependence (TOD).', 'pragma solidity ^0.4.5;<br/>contract StandardToken is ERC20, BasicToken {<br/>&#160;&#160;&#160;&#160;...<br/>&#160;&#160;&#160;&#160;function approve(address _spender, uint256 _value) public returns (bool) {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;allowed[msg.sender][_spender] = _value;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Approval(msg.sender, _spender, _value);<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return true;<br/>&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;...<br/>}', '', 'Before performing the approve change, reset the value to zero first, and then perform the change operation.'], [45, 'function-problem', 'Abnormal termination of contract function', 'Medium', 'probably', 'Pass', 'The function will always end in an abnormal state such as revert(), and it cannot return after the normal execution, indicating that there is a problem with the function design.', 'contract Functionproblem {<br/>&#160;&#160;&#160;&#160;address owner;<br/>&#160;&#160;&#160;&#160;function bad() { //bad<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;revert();<br/>&#160;&#160;&#160;&#160;}<br/>}', '', 'Check the logical structure of the contract function.'], [46, 'mul-var-len-arguments', 'Hash collisions with multiple variable', 'Medium', 'probably', 'Pass', 'abi.encodePacked() In some cases, using multiple variable length parameters may cause hash collisions. Since abi.encodePacked() all elements are packed in order, regardless of whether they belong to an array, you can move elements between arrays, and as long as all elements are in the same order, it will return the same encoding. In the case of signature verification, an attacker can effectively bypass authorization by modifying the position of the element in the previous function call, thereby exploiting this vulnerability. Replay authentication through abi.encodePacked(), because in encodePacked(a,b), if both a and b are variable-length arrays, you can add the last one of a to the first one of b, so that the total order is not Change, you can generate the same value.', 'contract Mulvarlenarguments {<br/>&#160;&#160;&#160;&#160;function addUsers(<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;address[] calldata admins,<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;address[] calldata regularUsers,<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bytes calldata signature<br/>&#160;&#160;&#160;&#160;)<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;external<br/>&#160;&#160;&#160;&#160;{ <br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bytes32 hash = keccak256(abi.encodePacked(admins, regularUsers));<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;address signer = hash.toEthSignedMessageHash().recover(signature);<br/>&#160;&#160;&#160;&#160;}<br/>}', '', 'The parameters of abi.encodePacked() should be as long as possible, and variable arrays should be avoided as much as possible.'], [47, 'reentrancy-no-eth', 'Re-entry vulnerabilities (no ether theft)', 'Medium', 'probably', 'Pass', 'Check that there is reentrancy (there is a situation that reads first, writes later), but there is no transfer of eth.', 'function bug(){<br/>&#160;&#160;&#160;&#160;require(not_called);<br/>&#160;&#160;&#160;&#160;if( ! (msg.sender.call() ) ){<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;throw;<br/>&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;not_called = False;<br/>}', '', 'Apply the check-effects-interactions model.'], [48, 'reused-constructor', 'Constructor conflict problem in the contract', 'Medium', 'probably', 'Pass', 'Check whether the same basic constructor is called with parameters from two different positions in the same inheritance hierarchy.', 'pragma solidity ^0.4.0;<br/>contract A{<br/>&#160;&#160;&#160;&#160;uint num = 5;<br/>&#160;&#160;&#160;&#160;constructor(uint x) public{<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;num += x;<br/>&#160;&#160;&#160;&#160;}<br/>}<br/>contract B is A{<br/>&#160;&#160;&#160;&#160;constructor() A(2) public { /* ... */ }<br/>}<br/>contract C is A {<br/>&#160;&#160;&#160;&#160;constructor() A(3) public { /* ... */ }<br/>}<br/>contract D is B, C {<br/>&#160;&#160;&#160;&#160;constructor() public { /* ... */ }<br/>}<br/>contract E is B {<br/>&#160;&#160;&#160;&#160;constructor() A(1) public { /* ... */ }<br/>}', 'The constructor of A is called multiple times in D and E: D inherits from B and C, and both constitute A. E only inherits from B, but B and E construct A.', 'Remove duplicate constructor calls.'], [49, 'tx-origin', 'Check the dangerous use of tx.origin', 'Medium', 'probably', 'Pass', 'If a legitimate user interacts with a malicious contract, the protection based on tx.origin will be abused by the malicious contract.', 'contract TxOrigin {<br/>&#160;&#160;&#160;&#160;address owner = msg.sender;<br/>&#160;&#160;&#160;&#160;function bug() {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;require(tx.origin == owner);<br/>&#160;&#160;&#160;&#160;}<br/>}', "Bob is the owner of TxOrigin. Bob calls Eve's contract. Eve's contract is called TxOrigin and bypasses the protection of tx.origin.", 'Do not use `tx.origin` for authorization.'], [50, 'typographical-error', 'Check for writing errors (=+)', 'Medium', 'probably', 'Pass', 'For example, when the intent of a defined operation is to sum a number with a variable (+=), but a typographical error is accidentally defined in the wrong way (= +), a typographical error occurs, and this happens to be effective Operator. Instead of calculating the sum, initialize the variables again.', 'pragma solidity ^0.4.24;<br/>contract TypoOneCommand {<br/>&#160;&#160;&#160;&#160;uint numberOne = 1;<br/>&#160;&#160;&#160;&#160;string numberstring = "";<br/>&#160;&#160;&#160;&#160;function alwaysOne() public {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;numberOne =+ 1; //bad<br/>&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;function alwaysOne_bad() public {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;numberOne =- 1; //bad<br/>&#160;&#160;&#160;&#160;}<br/>}', '', 'Check the operation symbols carefully, and if you find any errors, please change them in time.'], [51, 'unchecked-lowlevel', 'Check for uncensored low-level calls', 'Medium', 'probably', 'Pass', 'The low-level call to the external contract failed, and the return value was not judged. When sending ether at the same time, please check the return value and handle the error.', 'contract MyConc{<br/>&#160;&#160;&#160;&#160;function my_func(address payable dst) public payable{<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dst.call.value(msg.value)("");<br/>&#160;&#160;&#160;&#160;}<br/>}', 'The return value of the low-level call is not checked, so if the call fails, the ether will be locked in the contract. If you use low-level calls to block block operations, consider logging the failed calls.', 'Make sure to check or record the return value of low-level calls.'], [52, 'unchecked-send', 'Check unreviewed send', 'Medium', 'probably', 'Pass', 'Similar to unchecked-lowlevel, it is explained here that the return value of send and Highlevelcall is not checked.', 'contract MyConc{<br/>&#160;&#160;&#160;&#160;function my_func(address payable dst) public payable{<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;dst.send(msg.value);<br/>&#160;&#160;&#160;&#160;}<br/>}', 'The return value of send is not checked, so if the send fails, the ether will be locked in the contract. If you use send to prevent block operations, please consider logging failed send.', 'Make sure to check or record the return value of send.'], [53, 'uninitialized-local', 'Check for uninitialized local variables', 'Medium', 'probably', 'Pass', 'Check the local variables that are not initialized.', 'contract Uninitialized is Owner{<br/>&#160;&#160;&#160;&#160;function withdraw() payable public onlyOwner{<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;address to;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;to.transfer(this.balance)<br/>&#160;&#160;&#160;&#160;}<br/>}', 'Bob calls transfer. As a result, all ether was sent to the address "0x0" and lost.', 'Initialize all variables. If you want to initialize a variable to zero, set it to zero.'], [54, 'unused-return', 'Check if there is an unused return value', 'Medium', 'probably', 'Pass', 'The return value of the call is not stored in a local variable or state variable, that is, the calling function may not have any effect.', 'contract MyConc{<br/>&#160;&#160;&#160;&#160;using SafeMath for uint;   <br/>&#160;&#160;&#160;&#160;function my_func(uint a, uint b) public{<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;a.add(b);<br/>&#160;&#160;&#160;&#160;}<br/>}', "MyConc will call SafeMath's add, but will not store the result in a. As a result, the calculation has no effect.", 'Ensure that all return values of the function call are used.'], [55, 'writeto-arbitrarystorage', 'It can be written to any storage location', 'Medium', 'probably', 'Pass', 'The data of the smart contract (for example, the owner of the storage contract) is permanently stored in a storage location (ie, key or address) at the EVM level. The contract is responsible for ensuring that only authorized users or contract accounts can write to sensitive storage locations. If an attacker can write to any storage location of the contract, the authorization check can be easily bypassed. This may allow an attacker to destroy the storage space. For example, by overwriting a field that stores the address of the contract owner.', 'contract Map {<br/>&#160;&#160;&#160;&#160;address public owner;<br/>&#160;&#160;&#160;&#160;uint256[] map;<br/>&#160;&#160;&#160;&#160;function set(uint256 key, uint256 value) public {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (map.length <= key) {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;map.length = key + 1;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;map[key] = value;<br/>&#160;&#160;&#160;&#160;}<br/>}', '', 'Strictly judge the location of the storage variable.'], [56, 'integer-overflow', 'Check for integer overflow', 'Medium', 'probably', 'Pass', 'When an arithmetic operation reaches the maximum or minimum size of the type, overflow/underflow will occur. For example, if a number is stored in the uint8 type, it means that the number is stored as an 8-bit unsigned number, ranging from 0 to 2^8-1. In computer programming, when an arithmetic operation attempts to create a value, an integer overflow occurs, and the value can be represented by a given number of bits-greater than the maximum value or less than the minimum value.', 'contract Intergeroverflow{<br/>&#160;&#160;&#160;&#160;function bad() {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uint a;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uint b;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uint c = a + b;<br/>&#160;&#160;&#160;&#160;}<br/>}', '', 'Use Safemath to perform integer arithmetic or verify calculated values.'], [57, 'costly-loop', 'Check for too expensive loops', 'Medium', 'possibly', 'Pass', 'Ethereum is a very resource-constrained environment. The price of each calculation step is several orders of magnitude higher than the price of the centralized provider. In addition, Ethereum miners impose limits on the total amount of natural gas consumed in the block. If array.length is large enough, the function exceeds the gas limit, and the transaction that calls the function will never be confirmed. If external participants influence array.length, this will become a security issue.', 'pragma solidity 0.4.24;<br/>contract PriceOracle {<br/>&#160;&#160;&#160;&#160;address internal owner;<br/>&#160;&#160;&#160;&#160;address[] public subscribers;<br/>&#160;&#160;&#160;&#160;mapping(address => uint) balances;<br/>&#160;&#160;&#160;&#160;uint internal constant PRICE = 10**15;<br/>&#160;&#160;&#160;&#160;function subscribe() payable external{<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;subscribers.push(msg.sender);<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;balances[msg.sender] += msg.value;<br/>&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;function setPrice(uint price) external {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;require(msg.sender == owner);<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bytes memory data = abi.encodeWithSelector(SIGNATURE, price);<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for (uint i = 0; i < subscribers.length; i++) {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if(balances[subscribers[i]] >= PRICE) {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;balances[subscribers[i]] -= PRICE;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;subscribers[i].call.gas(50000)(data);<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;}<br/>}', '', 'Please check the dynamic array of the loop carefully. If you find it can be exploited by an attacker, please change it to prevent the contract from executing too many loops and causing gas overflow and rollback.'], [58, 'shift-parameter-mixup', 'Check reversible shift operation', 'Medium', 'possibly', 'Pass', 'Check whether the value in the shift operation is inverted.', 'contract C {<br/>&#160;&#160;&#160;&#160;function f() internal returns (uint a) {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assembly {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;a := shr(a, 8)<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;}<br/>}', 'The shift statement shifts the constant 8 one bit to the right.', 'Exchange the order of parameters.'], [59, 'shadowing-builtin', 'Check the hiding of built-in symbols', 'Low', 'exactly', 'Pass', 'Use local variables, state variables, functions, modifiers or events to detect hidden built-in symbols.', 'pragma solidity ^0.4.24;<br/>contract Bug {<br/>&#160;&#160;&#160;&#160;uint now; // Overshadows current time stamp.<br/>&#160;&#160;&#160;&#160;function assert(bool condition) public {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Overshadows built-in symbol for providing assertions.<br/>&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;function get_next_expiration(uint earlier_time) private returns (uint) {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return now + 259200; // References overshadowed timestamp.<br/>&#160;&#160;&#160;&#160;}<br/>}', 'now is defined as a state variable, and the built-in symbol now is hidden. The assert function eclipses the built-in assert function. Such use of these built-in symbols may lead to unexpected results.', 'Rename local variables, state variables, functions, modifiers and events that hide built-in symbols.'], [60, 'shadowing-function', 'Check function hiding', 'Low', 'exactly', 'Pass', 'Detect hidden functions.', 'contract BaseContract{<br/>&#160;&#160;&#160;&#160;function aa(uint a,uint b) returns (uint) {<br/>&#160;&#160;&#160;&#160;return a;<br/>&#160;&#160;&#160;&#160;}<br/>}<br/>contract DerivedContract is BaseContract{<br/>&#160;&#160;&#160;&#160;function aa(uint a,uint b) returns (uint) {<br/>&#160;&#160;&#160;&#160;return b;<br/>&#160;&#160;&#160;&#160;}<br/>}', 'The aa function of BaseContract does not work.', 'Change the name of the hidden or hidden function.'], [61, 'shadowing-local', 'Check local variable hiding', 'Low', 'exactly', 'Pass', 'Detect hidden local variables.', 'pragma solidity ^0.4.24;<br/>contract Bug {<br/>&#160;&#160;&#160;&#160;uint owner;<br/>&#160;&#160;&#160;&#160;function sensitive_function(address owner) public {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// ...<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;require(owner == msg.sender);<br/>&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;function alternate_sensitive_function() public {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;address owner = msg.sender;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// ...<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;require(owner == msg.sender);<br/>&#160;&#160;&#160;&#160;}<br/>}', 'The sensitive_function.owner hides the Bug.owner. As a result, using owner in sensitive_function may be incorrect.', 'Rename hidden or hidden local variables.'], [62, 'transfer-to-zeroaddress', 'The withdrawal address is 0x0', 'Low', 'exactly', 'Pass', 'In sensitive functions such as transfer, transferFrom, and transferOwnership, user operations are irreversible. Therefore, it is recommended that developers add a non-zero check for the target address in the implementation of these functions to avoid user misuse and cause loss of user permissions and property damage. If it is transferred to 0x00, it will be difficult for the ether to revert, which will cause the ether to be lost.', 'contract Transfertozeroaddress {<br/>&#160;&#160;&#160;&#160;address owner;<br/>&#160;&#160;&#160;&#160;function bad() {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;address aa = 0x0;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aa.transfer(msg.value);<br/>&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;function good() {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;address aa = 0x0;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if(aa != 0x0) {revert();}<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;aa.transfer(msg.value);<br/>&#160;&#160;&#160;&#160;}<br/>}', '', 'Please check whether the transfer object of Ether is a zero address.'], [63, 'uninitialized-fptr-cst', 'Uninitialized pointers in constructor', 'Low', 'exactly', 'Pass', 'Solc versions 0.4.5-0.4.26 and 0.5.0-0.5.8 contain a compiler error that causes unexpected behavior when calling uninitialized function pointers in the constructor.', 'contract bad0 {<br/>&#160;&#160;&#160;&#160;constructor() public {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Uninitialized function pointer */<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;function(uint256) internal returns(uint256) a;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;a(10);<br/>&#160;&#160;&#160;&#160;}<br/>}', 'Calling a(10) will cause unexpected behavior because the function pointer a is not initialized in the constructor.', 'Initialize the function pointer before calling. In addition, avoid using function pointers as much as possible. What needs to be noted here is the loophole of the compiler when calling uninitialized pointers in the constructor.'], [64, 'variable-scope', 'Check the declaration of variables', 'Low', 'exactly', 'Pass', 'Check the possible usage of the variable before closing the declaration (because it was declared later, or declared in another scope).', "contract C {<br/>&#160;&#160;&#160;&#160;function f(uint z) public returns (uint) {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uint y = x + 9 + z; // 'z' is used pre-declaration<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uint x = 7;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (z % 2 == 0) {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uint max = 5;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// ...<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// 'max' was intended to be 5, but it was mistakenly declared in a scope and not assigned (so it is zero).<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for (uint i = 0; i < max; i++) {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;x += 1;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return x;<br/>&#160;&#160;&#160;&#160;}<br/>}", 'In the above case, the variable x will be used before the declaration, which may lead to unintended consequences. In addition, the for loop uses the variable max, which is declared in a previous scope that may not have been reached before. If the user incorrectly uses the variable before any expected statement assignment, it may lead to unintended consequences. It may also indicate that the user intends to reference other variables. That is, max may not be declared normally, and unexpected situations will occur during subsequent calls.', 'Before making any use of variables, please move all variable declarations first, and make sure that the unconditional use of variable declarations does not depend on certain conditional declarations.'], [65, 'void-cst', 'Calls to unimplemented constructors', 'Low', 'exactly', 'Pass', 'Detect calls to unimplemented constructors. The calling contract does not declare a constructor.', 'contract A{}<br/>contract B is A{<br/>&#160;&#160;&#160;&#160;constructor() public A(){}<br/>}', "When reading the definition of B's constructor, we can assume that A() starts the contract, but no code is executed.", 'Remove calls to unimplemented constructors.'], [66, 'incorrect-modifier', 'Restore abnormal Modifier', 'Low', 'exactly', 'Pass', 'If the modifier does not execute _ or restore, the execution of the function will return to the default value, which may mislead the caller.', 'contract A{<br/>&#160;&#160;&#160;&#160;modidfier myModifier(){<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if(false){<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;   _;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;function set() myModifier returns(uint){<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return 0;<br/>&#160;&#160;&#160;&#160;}<br/>}', 'myModifier will cause the set function to fail to execute.', 'Check whether all paths in the modifier can be executed _ or restore.'], [67, 'assemblycall-rewrite', 'Assemblycall covers the input', 'Low', 'probably', 'Pass', 'It is dangerous to use the inline assembly instruction assemblyCall of the CALL series, which will overwrite the input with the output. If an arbitrary address is called a return value, the return value may be different from the expected value.', 'contract MixinSignatureValidator {<br/>&#160;&#160;&#160;&#160;function isValidWalletSignature(<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bytes32 hash,<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;address walletAddress,<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bytes signature<br/>&#160;&#160;&#160;&#160;)internal view returns (bool isValid){<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assembly {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let cdStart := add(calldata, 32)<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let success := staticcall(<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;gas,              // forward all gas<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;walletAddress,    // address of Wallet contract<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cdStart,          // pointer to start of input<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;mload(calldata),  // length of input<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;cdStart,          // write output over input<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;32                // output size is 32 bytes<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;)<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return isValid;<br/>&#160;&#160;&#160;&#160;}<br/>}', '', 'Please carefully check the place where the assemblycall is used to ensure that the input cannot be overwritten and the error is caused, otherwise the instruction is not used.'], [68, 'block-other-parameters', 'Hazardous use variables (block.number etc.)', 'Low', 'probably', 'Pass', 'Contracts usually require access to time values \u200b\u200bto perform certain types of functions. block.number can let you know the current time or time increment, but in most cases it is not safe to use them. block.number The block time of Ethereum is usually about 14 seconds, so the time increment between blocks can be predicted. However, the lockout time is not fixed and may change due to various reasons (for example, fork reorganization and difficulty coefficient). Since the block time is variable, block.number should not rely on accurate time calculations. The ability to generate random numbers is very useful in various applications. An obvious example is a gambling DApp, where a pseudo-random number generator is used to select the winner. However, creating a sufficiently powerful source of randomness in Ethereum is very challenging. Using blockhash, block.difficulty and other areas is also unsafe because they are controlled by miners. If the stakes are high, the miner can mine a large number of blocks by renting hardware in a short period of time, select the block that needs to obtain the block hash value to win, and then discard all other blocks.', 'contract Otherparameters{<br/>&#160;&#160;&#160;&#160;event Number(uint);<br/>&#160;&#160;&#160;&#160;event Coinbase(address);<br/>&#160;&#160;&#160;&#160;event Difficulty(uint);<br/>&#160;&#160;&#160;&#160;event Gaslimit(uint);<br/>&#160;&#160;&#160;&#160;function bad0() external{<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;require(block.number == 20);<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;require(block.coinbase == msg.sender);<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;require(block.difficulty == 20);<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;require(block.gaslimit == 20);<br/>&#160;&#160;&#160;&#160;}<br/>}', "The randomness of Bob's contract depends on block.number and so on. Eve is a miner who manipulates block.number and so on to use Bob's contract.", 'Avoid relying on block.number and other data that can be manipulated by miners.'], [69, 'calls-loop', 'Check the external call in the loop', 'Low', 'probably', 'Pass', 'Check that the key access control ETH is transmitted cyclically. If at least one address cannot receive ETH (for example, it is a contract with a default fallback function), the entire transaction will be restored. Loss of parameters.', 'contract CallsInLoop{<br/>&#160;&#160;&#160;&#160;address[] destinations;<br/>&#160;&#160;&#160;&#160;constructor(address[] newDestinations) public{<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;destinations = newDestinations;<br/>&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;function bad() external{<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for (uint i=0; i < destinations.length; i++){<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;destinations[i].transfer(i);<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;}<br/>}', 'If one of the destination addresses is restored by the rollback function, bad() will restore all, so all the work is wasted.', 'Try to avoid calling external contracts in the loop, and you can use the pull over push strategy.'], [70, 'events-access', 'The loss of key access control parameters', 'Low', 'probably', 'Pass', 'Detect missing events of key access control parameters.', 'contract C {<br/>&#160;&#160;&#160;&#160;modifier onlyAdmin {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (msg.sender != owner) throw;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;_;<br/>&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;function updateOwner(address newOwner) onlyAdmin external {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;owner = newOwner;<br/>&#160;&#160;&#160;&#160;}<br/>}', 'updateOwner() has no events, so it is difficult to track these extremely privileged operations off-chain.', 'The event records the changes of key parameters.'], [71, 'events-maths', 'The loss of key arithmetic parameters', 'Low', 'probably', 'Pass', 'Detect missing events of key arithmetic parameters.', 'contract C {<br/>&#160;&#160;&#160;&#160;modifier onlyOwner {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (msg.sender != owner) throw;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;_;<br/>&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;function setBuyPrice(uint256 newBuyPrice) onlyOwner public {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;buyPrice = newBuyPrice;<br/>&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;function buy() external {<br/>&#160;&#160;&#160;&#160; ... // buyPrice is used to determine the number of tokens purchased<br/>&#160;&#160;&#160;&#160;}&#160;&#160;&#160;&#160;<br/>}', 'setBuyPrice does not record events, so it is difficult to track changes in the purchase price off-chain.', 'The event records the changes of key parameters.'], [72, 'extcodesize-invoke', 'Check Extcodesize call', 'Low', 'probably', 'Pass', 'The extcodesize is zero when the contract is deployed, and the attacker can call the victim contract in his own constructor. At this time, using extcodesize to verify is invalid.', "pragma solidity ^0.4.23;<br/>contract ExtCodeSize {<br/>&#160;&#160;&#160;&#160;// This contract would be 'hacked' if the address saved here is a contract address<br/>&#160;&#160;&#160;&#160;address public thisIsNotAContract;<br/>&#160;&#160;&#160;&#160;function aContractCannotCallThis() public {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uint codeSize;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assembly { codeSize := extcodesize(caller) }<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// If extcodesize returns 0, it means the caller's code length is 0, so, it is not a contract...<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// or maybe not<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;require(codeSize == 0);<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;thisIsNotAContract = msg.sender;<br/>&#160;&#160;&#160;&#160;}<br/>}", '', 'Try to avoid using extcodesize to judge that the account is equal to zero. It can be changed to not equal to zero and judge the opposite situation.'], [73, 'fllback-outofgas', 'The fallback function is too complicated', 'Low', 'probably', 'Pass', 'The fallback function of the contract is usually used to receive an eth transfer (restore the withdrawal operation after the transfer fails), but if too complicated logic is implemented in the fallback, the gas may be exhausted, resulting in unsuccessful transfer.', 'contract C {<br/>&#160;&#160;&#160;&#160;function f(uint a, uint b) public{<br/>&#160;&#160;&#160;&#160;uint a = 0;<br/>&#160;&#160;&#160;&#160;do {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;continue;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;a++;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;} while(a<10);<br/>&#160;&#160;&#160;&#160;}<br/>}', '', 'Please simplify the fallback function.'], [74, 'incorrect-blockhash', 'Incorrect use of Blockhash function', 'Low', 'probably', 'Pass', 'The blockhash function only returns the non-zero value of the last 256 blocks. In addition, for the current block, it always returns 0, that is, blockhash (block number) is always equal to 0. The hash of the current block cannot be queried, only the most recent 256 blocks can be queried, otherwise only the value 0 is returned.', 'pragma solidity 0.4.25;<br/>contract MyContract {<br/>&#160;&#160;&#160;&#160;function currentBlockHash() public view returns(bytes32) {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return blockhash(block.number);<br/>&#160;&#160;&#160;&#160;}<br/>}', '', 'When using the blockhash function, please make sure to use it correctly.'], [75, 'incorrect-inheritance-order', 'The inherited variables conflict', 'Low', 'probably', 'Pass', 'The entity supports multiple inheritance, which means that a contract can inherit multiple contracts. Multiple inheritance introduces an ambiguity problem called diamond: if two or more basic contracts define the same function, which one should be called in the sub-contract? Solidity resolves this ambiguity by using reverse C3 linearization, which sets a priority between the underlying contracts. In this way, basic contracts have different priorities, so the order of inheritance is important. Ignoring the order of inheritance may lead to unexpected behavior. Pay attention to the order of contract inheritance, because the inherited contract may have overlapping variables or functions, and the inheritance order determines the level of the contract, which in turn determines the overlapping variables and functions in which contract to use.', 'contract A {<br/>&#160;&#160;&#160;&#160;address owner;<br/>}<br/>contract B {<br/>&#160;&#160;&#160;&#160;address owner;<br/>}<br/>contract C is B,A{}', '', 'Check the order of inheritance.'], [76, 'missing-zero-check', 'Check the use of zero addresses', 'Low', 'probably', 'Pass', 'Check the verification of the zero address.', 'contract C {<br/>&#160;&#160;&#160;&#160;modifier onlyAdmin {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (msg.sender != owner) throw;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;_;<br/>&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;function updateOwner(address newOwner) onlyAdmin external {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;owner = newOwner;<br/>&#160;&#160;&#160;&#160;}<br/>}', 'Bob calls updateOwner without specifying newOwner, so Bob loses the ownership of the contract.', 'Check that the address is not zero.'], [77, 'reentrancy-benign', 'Reentrant vulnerabilities (continuous calls)', 'Low', 'probably', 'Pass', 'A reentrancy error is detected. The main explanation here is that the effect of the reentrancy is the same as calling the function twice.', 'function callme(){<br/>&#160;&#160;&#160;&#160;if( ! (msg.sender.call()() ) ){<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;throw;<br/>&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;counter += 1<br/>}', 'callme contains reentrant vulnerabilities. But reentrancy is benign, because its use has the same effect as two consecutive calls.', 'Apply the check-effects-interactions model.'], [78, 'reentrancy-events', 'Reentrant vulnerabilities (events)', 'Low', 'probably', 'Pass', 'A reentrancy error is detected, only reentrance vulnerabilities that can lead to out-of-sequence events are reported here.', 'function bug(Called d){<br/>&#160;&#160;&#160;&#160;counter += 1;<br/>&#160;&#160;&#160;&#160;d.f();<br/>&#160;&#160;&#160;&#160;emit Counter(counter);<br/>}', 'If d() is reentered, Counter events will be displayed in the wrong order, which may cause problems for third parties.', 'Apply the check-effects-interactions model.'], [79, 'timestamp', 'The dangerous use of block.timestamp', 'Low', 'probably', 'Pass', 'There is a strict comparison with block.timestamp or now in the contract, and miners can benefit from block.timestamp.', 'contract Timestamp{<br/>&#160;&#160;&#160;&#160;event Time(uint);<br/>&#160;&#160;&#160;&#160;modifier onlyOwner {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;require(block.timestamp == 0);<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;_;  <br/>&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;function bad0() external{<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;require(block.timestamp == 0);<br/>&#160;&#160;&#160;&#160;}<br/>}', "Bob's contract relies on the randomness of block.timestamp. Eve is a miner who manipulates block.timestamp to take advantage of Bob's contract.", 'Avoid relying on block.timestamp.'], [80, 'signature-malleability', 'The signature contains an existing signature', 'Low', 'possibly', 'Pass', 'The implementation of the cryptographic signature system in the Ethereum contract usually assumes that the signature is unique, but the signature can be changed without having the private key, and the signature is still valid. The EVM specification defines several so-called "pre-compiled" contracts, one of which ecrecover performs elliptic curve public key recovery. A malicious user can slightly modify the three values v, r and s to create other valid signatures. If the signature is part of the signed message hash, the system that performs signature verification at the contract level may be attacked. Malicious users can create valid signatures to replay previously signed messages. The signature cannot contain the existing signature, which is vulnerable to attack.', 'function transfer(bytes _signature,address _to,uint256 _value,uint256 _gasPrice,uint256 _nonce) public returns (bool){<br/>&#160;&#160;&#160;&#160;bytes32 txid = keccak256(abi.encodePacked(getTransferHash(_to, _value, _gasPrice, _nonce), _signature)); //bad<br/>&#160;&#160;&#160;&#160;require(!signatureUsed[txid]);<br/>&#160;&#160;&#160;&#160;address from = recoverTransferPreSigned(_signature, _to, _value, _gasPrice, _nonce);<br/>&#160;&#160;&#160;&#160;require(balances[from] > _value);<br/>&#160;&#160;&#160;&#160;balances[from] -= _value;<br/>&#160;&#160;&#160;&#160;balances[_to] += _value;<br/>&#160;&#160;&#160;&#160;signatureUsed[txid] = true;<br/>}', '', 'The signature should not contain an existing signature.'], [81, 'assembly', 'Unsafe use of assembly', 'Info', 'exactly', 'Pass', 'Inline assembly is to access the Ethereum virtual machine from a low level, which leads to the abandonment of several important security features of Solidity.', 'function recover(bytes32 hash, bytes sig) public pure returns (address) {<br/>&#160;&#160;&#160;&#160;bytes32 r;<br/>&#160;&#160;&#160;&#160;bytes32 s;<br/>&#160;&#160;&#160;&#160;uint8 v;<br/>&#160;&#160;&#160;&#160;// Divide the signature in r, s and v variables<br/>&#160;&#160;&#160;&#160;assembly {<br/>&#160;&#160;&#160;&#160; &#160;&#160;&#160;&#160;r := mload(add(sig, 32))<br/>&#160;&#160;&#160;&#160; &#160;&#160;&#160;&#160;s := mload(add(sig, 64))<br/>&#160;&#160;&#160;&#160; &#160;&#160;&#160;&#160;v := byte(0, mload(add(sig, 96)))<br/>&#160;&#160;&#160;&#160;}<br/>}', '', 'Check the inline assembly instructions carefully to make sure they can run safely, otherwise they need to be replaced.'], [82, 'assert-state-change', 'Incorrect use of assert()', 'Info', 'exactly', 'Pass', 'Wrong use of assert(). See Solidity best practices.', 'contract A {<br/>  uint s_a;<br/>  function bad() public {<br/>&#160;&#160;&#160;&#160;assert((s_a += 1) > 10);<br/>  }<br/>}', 'The assert in Bad() increments the state variable s_a when checking the condition.', 'Use require to modify the invariant of the state.'], [83, 'delete-dynamic-arrays', 'The deletion of the dynamic storage array', 'Info', 'exactly', 'Pass', 'Applying delete or .length=0 to dynamically sized storage arrays may cause Out-of-Gas exceptions. Because it will traverse all the data in the array, the gas may be exceeded.', 'contract C {<br/>&#160;&#160;&#160;&#160;uint[] amounts;<br/>&#160;&#160;&#160;&#160;address payable[] addresses;<br/>&#160;&#160;&#160;&#160;function collect(address payable to) external payable {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;amounts.push(msg.value);<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;addresses.push(to);<br/>&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;function pay() external {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uint length = amounts.length;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;delete amounts;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;delete addresses;<br/>&#160;&#160;&#160;&#160;}<br/>}', '', 'Carefully check the deletion of the dynamic array or the operation of directly changing the length of the array to see if the array can be added arbitrarily by the attacker.'], [84, 'deprecated-standards', 'Solidity deprecated instructions', 'Info', 'exactly', 'Pass', 'Several functions and operators in Solidity are not recommended. Using them will reduce code quality. In the new major version of the Solidity compiler, deprecated functions and operators may cause side effects and compilation errors. Structures deprecated by Solidity after 0.5.0: years, sha3, suicide, throw and constant functions.', 'contract ContractWithDeprecatedReferences {<br/>&#160;&#160;&#160;&#160;// Deprecated: Change block.blockhash() -> blockhash()<br/>&#160;&#160;&#160;&#160;bytes32 globalBlockHash = block.blockhash(0);<br/>&#160;&#160;&#160;&#160;// Deprecated: Change constant -> view<br/>&#160;&#160;&#160;&#160;function functionWithDeprecatedThrow() public constant {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Deprecated: Change msg.gas -> gasleft()<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if(msg.gas == msg.value) {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Deprecated: Change throw -> revert()<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;throw;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;// Deprecated: Change constant -> view<br/>&#160;&#160;&#160;&#160;function functionWithDeprecatedReferences() public constant {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Deprecated: Change sha3() -> keccak256()<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bytes32 sha3Result = sha3("test deprecated sha3 usage");<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Deprecated: Change callcode() -> delegatecall()<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;address(this).callcode();<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Deprecated: Change suicide() -> selfdestruct()<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;suicide(address(0));<br/>&#160;&#160;&#160;&#160;}<br/>}', '', 'Replace all variables or functions that cannot be used (especially after 0.5.0).'], [85, 'erc20-indexed', 'ERC20 event parameter is missing indexed', 'Info', 'exactly', 'Pass', 'The address parameters of the "Transfer" and "Approval" events of the ERC-20 token standard shall include indexed.', 'contract ERC20Bad {<br/>&#160;&#160;&#160;&#160;// ...<br/>&#160;&#160;&#160;&#160;event Transfer(address from, address to, uint value);<br/>&#160;&#160;&#160;&#160;event Approval(address owner, address spender, uint value);<br/>&#160;&#160;&#160;&#160;// ...<br/>}', 'According to the definition of the ERC20 specification, the first two parameters of the Transfer and Approval events should carry the indexed keyword. If these keywords are not included, the parameter data will be excluded from the bloom filter of the transaction/block. Therefore, external tools searching for these parameters may ignore them and fail to index the logs in this token contract.', 'According to the ERC20 specification, the indexed keyword is added to the event parameter of the corresponding keyword.'], [86, 'erc20-throw', 'ERC20 throws an exception', 'Info', 'exactly', 'Pass', 'The function of the ERC-20 token standard should be thrown in the following special circumstances: if there are not enough tokens in the _from account balance to spend, it should be thrown; unless the _from account deliberately authorizes the sending of messages through some mechanism Otherwise, transferFrom should be thrown.', 'contract SomeToken {<br/>&#160;&#160;&#160;&#160;mapping(address => uint256) balances;<br/>&#160;&#160;&#160;&#160;event Transfer(address indexed _from, address indexed _to, uint256 _value);<br/>&#160;&#160;&#160;&#160;function transfer(address _to, uint _value) public returns (bool) {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (_value > balances[msg.sender] || _value > balances[_to] + _value) {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return false;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;balances[msg.sender] = balances[msg.sender] - _value;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;balances[_to] = balances[_to] + _value;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;emit Transfer(msg.sender, _to, _value);<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return true;<br/>&#160;&#160;&#160;&#160;}<br/>}', '', 'Add the corresponding throw method to ERC-20 tokens.'], [87, 'length-manipulation', 'Unsafe operation to check array length', 'Info', 'exactly', 'Pass', 'The length of the dynamic array changes directly. In this case, huge arrays may appear, and storage overlap attacks (conflicts with other data in the storage) may result. The operations of "length" are: =, +=, -=, *=, /=, --, etc.', 'pragma solidity 0.4.24;<br/>contract dataStorage {<br/>&#160;&#160;&#160;&#160;uint[] public data;<br/>&#160;&#160;&#160;&#160;function writeData(uint[] _data) external {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for(uint i = data.length; i < _data.length; i++) {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;data.length++;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;data[i]=_data[i];<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;}<br/>}', '', 'Carefully check the operation of the dynamic array to see if the array can be added arbitrarily by the attacker.'], [88, 'low-level-calls', 'Check low-level calls', 'Info', 'exactly', 'Pass', 'Label low-level methods such as call, delegatecall, and callcode, because these methods are easily exploited by attackers.', 'contract Sender {<br/>&#160;&#160;&#160;&#160;address owner;<br/>&#160;&#160;&#160;&#160;modifier onlyceshi() {<br/>&#160;&#160;&#160;&#160;owner.callcode(bytes4(keccak256("inc()")));<br/>&#160;&#160;&#160;&#160;_;<br/>&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;function send(address _receiver) payable external {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;_receiver.call.value(msg.value).gas(7777)("");<br/>&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;function sendceshi(address _receiver) payable external {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if(_receiver.call.value(msg.value).gas(7777)("")){<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;revert();<br/>&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;}<br/>}', '', 'Avoid low-level calls. Check whether the call is successful. If the call is to sign a contract, please check whether the code exists.'], [89, 'msgvalue-equals-zero', 'The judgment of msg.value and zero', 'Info', 'exactly', 'Pass', 'msg.value==0 The check condition is meaningless in most cases.', 'contract A{<br/>&#160;&#160;&#160;&#160;address owner;<br/>&#160;&#160;&#160;&#160;mapping(address => uint256) balances;<br/>&#160;&#160;&#160;&#160;constructor() {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;owner = msg.sender;<br/>&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;function B() return (uint256){<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if(masg.value == 0) {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return 0;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;balances[msg.sender] += msg.value;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return balances[msg.sender];<br/>&#160;&#160;&#160;&#160;}<br/>}', '', 'Check whether the check condition is really needed, and delete it if it is not needed to save gas.'], [90, 'naming-convention', 'The naming follows the Solidity format', 'Info', 'exactly', 'Pass', 'Check whether the naming written in the contract is standardized, because the naming is messy and not easy to understand and manage.', 'contract naming {<br/>&#160;&#160;&#160;&#160;enum Numbers {ONE, TWO}<br/>&#160;&#160;&#160;&#160;enum numbers {ONE, TWO}<br/>&#160;&#160;&#160;&#160;uint constant MY_CONSTANT = 1;<br/>&#160;&#160;&#160;&#160;uint constant MY_other_CONSTANT = 2;<br/>&#160;&#160;&#160;&#160;uint Var_One = 1;<br/>&#160;&#160;&#160;&#160;uint varTwo = 2;<br/>}', '', 'Please follow Solidity [naming conventions] (https://solidity.readthedocs.io/en/v0.4.25/style-guide.html#naming-conventions).'], [91, 'pragma', 'Undeclared multiple compiled versions', 'Info', 'exactly', 'Pass', 'The use of different Solidity versions (more than two) in the contract will make the compiler not able to compile according to our ideas.', 'pragma solidity ^0.4.23;<br/>pragma solidity ^0.4.24;', '', 'Use a Solidity version.'], [92, 'solc-version', 'Check for incorrect Solidity version', 'Info', 'exactly', 'Pass', 'Solidity source files indicate the version of the compiler that can be compiled with them. It is recommended to indicate a clear version, because future versions of the compiler may handle certain language constructs in ways that developers cannot foresee.', 'pragma solidity >=0.4.23 <0.4.25;', '', 'Use a simple pragma version that allows any of these versions. Consider using the latest version of Solidity for testing. Solidity version recommended: 0.5.11-0.5.13, 0.5.15-0.5.17, 0.6.8, 0.6.10-0.6.11.'], [93, 'unimplemented-functions', 'Functions overloaded in the contract', 'Info', 'exactly', 'Pass', 'Detect functions that are not implemented on most derivative contracts.', 'interface BaseInterface {<br/>&#160;&#160;&#160;&#160;function f1() external returns(uint);<br/>&#160;&#160;&#160;&#160;function f2() external returns(uint);<br/>}<br/>interface BaseInterface2 {<br/>&#160;&#160;&#160;&#160;function f3() external returns(uint);<br/>}<br/>contract DerivedContract is BaseInterface, BaseInterface2 {<br/>&#160;&#160;&#160;&#160;function f1() external returns(uint){<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return 42;<br/>&#160;&#160;&#160;&#160;}<br/>}', 'DerivedContract does not implement BaseInterface.f2 or BaseInterface2.f3. As a result, the contract will not be compiled correctly. All unrealized functions must be realized on the contract to be used.', 'Implement all unimplemented features in any inheritance you plan to use directly (not just inheritance).'], [94, 'upgrade-050', 'Code for Solidity 0.5.x upgrade', 'Info', 'exactly', 'Pass', 'Check the code update for the Solidity 0.5.0 version. For example: .call() with more than one parameter, keccak256(...) with more than one parameter, etc.', 'contract Token {<br/>&#160;&#160;&#160;&#160;uint totalSupply;<br/>&#160;&#160;&#160;&#160;function Token() {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;totalSupply = +1e18;<br/>&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;function () payable {}<br/>}', '', 'Replace these updated codes and write the contract exactly in accordance with the syntax supported by the compiler.'], [95, 'function-init-state', 'State variables initialized by functions', 'Info', 'exactly', 'Pass', 'Detect non-fixed variables (the execution result in the function is related to the execution order in the function) to initialize the state variable. The different initialization sequence of the state variable may lead to different initialization values.', 'contract StateVaribleInitFromDynamicFunction {<br/>&#160;&#160;&#160;&#160;uint public v_al = setval(); // Initialize from function (sets to 77)<br/>&#160;&#160;&#160;&#160;uint public w_al = 7;<br/>&#160;&#160;&#160;&#160;uint public x_al = setval(); // Initialize from function (sets to 88)<br/><br/>&#160;&#160;&#160;&#160;constructor(){<br/>&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;function setval() public  returns(uint)  {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if(w_val == 0) {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return 4;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return 5;<br/>&#160;&#160;&#160;&#160;}<br/>}', 'The value of v_al is initialized to 4, and the value of x_al is initialized to 5. However, the caller believes that these two values should be the same. Therefore, this may cause other errors to occur.', 'Check the initialization of state variables by non-fixed functions. If these variables must be initialized, they can be initialized in the constructor.'], [96, 'complex-function', 'Check complex functions', 'Info', 'probably', 'Pass', 'Complicated functions will consume more gas. When gas is greater than the set gas limit, the transaction will fail to execute, so every call will fail.', 'contract Complex {<br/>&#160;&#160;&#160;&#160;function a() {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;int numberOfSides = 7;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;string shape;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uint i0 = 0;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uint i1 = 0;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uint i2 = 0;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uint i3 = 0;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uint i4 = 0;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uint i5 = 0;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uint i6 = 0;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uint i7 = 0;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uint i8 = 0;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uint i9 = 0;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uint i10 = 0;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;...<br/>&#160;&#160;&#160;&#160;}<br/>}', "Bob's call to function a() will exceed the gas limit, and the call will never succeed.", 'If possible, you can optimize the function.'], [97, 'hardcoded', 'Check the legitimacy of the address', 'Info', 'probably', 'Pass', 'The contract contains an unknown address, which may be used for some malicious activities. Need to check the hard-coded address and its purpose. The address length is prone to errors, and the length of the address is not enough, it will not report an error, so it is very dangerous to write a mistake. Here is an identification.', 'contract C {<br/>&#160;&#160;&#160;&#160;function f(uint a, uint b) pure returns (address) {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;address public multisig = 0xf64B584972FE6055a770477670208d737Fff282f;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return multisig;<br/>&#160;&#160;&#160;&#160;}<br/>}', '', 'Check carefully whether the address is wrong, and if there is an error, please take the time to correct it.'], [98, 'overpowered-role', 'The permissions are too concentrated', 'Info', 'probably', 'Pass', 'This function can only be called from one address, so the system relies heavily on this address. In this case, it may cause undesirable consequences for investors. For example, if the private key of the address is compromised, the account will become unusable and the contract will not function properly.', 'contract Crowdsale {<br/>&#160;&#160;&#160;&#160;address public owner;<br/>&#160;&#160;&#160;&#160;uint rate;<br/>&#160;&#160;&#160;&#160;constructor() {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;owner = msg.sender;<br/>&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;function setRate(_rate) public onlyOwner {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;rate = _rate;<br/>&#160;&#160;&#160;&#160;}<br/>}', '', 'Carefully check the address where the power is concentrated, and if there is no error, make sure that it is available during the contract operation period.'], [99, 'reentrancy-limited-events', 'Reentrancy vulnerabilities (limited events)', 'Info', 'probably', 'Pass', 'If a reentrancy error is detected, only reentry vulnerabilities that can cause out-of-sequence events in the restricted gas of read and transfer are reported here.', 'function bug(Called d){<br/>&#160;&#160;&#160;&#160;uint sendeth = 0;<br/>&#160;&#160;&#160;&#160;msg.sender.send(sendeth):<br/>&#160;&#160;&#160;&#160;emit Counter(counter);<br/>}', 'If you reenter "send", the "counter" events will be displayed in an incorrect order, which may cause problems for third parties.', 'Apply the check-effects-interactions model.'], [100, 'reentrancy-limited-gas', 'Reentry (send and transfer, with eth)', 'Info', 'probably', 'Pass', 'In the case of natural gas price changes, "send" and "transfer" cannot prevent re-entry, but only show that re-entry is more difficult.', 'function callme(){<br/>&#160;&#160;&#160;&#160;msg.sender.transfer(balances[msg.sender]):<br/>&#160;&#160;&#160;&#160;balances[msg.sender] = 0;<br/>}', 'In the case of natural gas price changes, "send" and "transfer" cannot prevent reentry.', 'Apply the check-effects-interactions model.'], [101, 'reentrancy-limited-gas-no-eth', 'Reentrance (send and transfer, no eth)', 'Info', 'probably', 'Pass', 'Compared with reentrancy-limited-gas, the send and transfer reentry without eth transfer is detected here.', 'function callme(){<br/>&#160;&#160;&#160;&#160;uint sendeth = 0;<br/>&#160;&#160;&#160;&#160;msg.sender.transfer(sendeth):<br/>&#160;&#160;&#160;&#160;balances[msg.sender] = balances[msg.sender] - sendeth;<br/>}', 'In the case of natural gas price changes, "send" and "transfer" cannot prevent reentry.', 'Apply the check-effects-interactions model.'], [102, 'similar-names', 'Detect similar variables', 'Info', 'probably', 'Pass', 'Detect variables whose names are too similar.', 'contract SimilarVariables {<br/>&#160;&#160;&#160;&#160;uint similarvariables1 = 1;<br/>&#160;&#160;&#160;&#160;uint similarvariables2 = 2;<br/>&#160;&#160;&#160;&#160;uint similarvariables3 = 3;<br/>}', 'Similar variables make the contract difficult to read.', 'Prevent variables from having similar names.'], [103, 'too-many-digits', 'Too many number symbols', 'Info', 'probably', 'Pass', 'Words with many numbers are difficult to read and view, and variable names are easy to mislead people.', 'contract MyContract{<br/>&#160;&#160;&#160;&#160;uint 1_ether = 10000000000000000000; <br/>}', 'Although 1_ether looks like 1 ether, it is 10 ether. As a result, it is likely to be used incorrectly.', 'Use [Ether abbreviation] (https://solidity.readthedocs.io/en/latest/units-and-global-variables.html#ether-units), [Time abbreviation] (https://solidity.readthedocs.io/ en/latest/units-and-global-variables.html#time-units), or [Scientific Notation] (https://solidity.readthedocs.io/en/latest/types.html#rational-and-integer- literals).'], [104, 'private-not-hidedata', 'Check the use of private visibility', 'Info', 'possibly', 'Pass', "Contrary to common understanding, the private modifier does not make variables invisible, and miners can access the code and data of all contracts. Developers must solve the problem of Ethereum's lack of privacy. Although it is private, it can be viewed by miners.", 'contract OpenWallet {<br/>&#160;&#160;&#160;&#160;struct Wallet {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bytes32 password;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uint balance;<br/>&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;mapping(uint => Wallet) private wallets;<br/>&#160;&#160;&#160;&#160;function replacePassword(uint _wallet, bytes32 _previous, bytes32 _new) public {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;require(_previous == wallets[_wallet].password);<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;wallets[_wallet].password = _new;<br/>&#160;&#160;&#160;&#160;}<br/>}', '', 'Carefully check the writing logic to ensure that the private variables you write can be seen, otherwise you should pay attention to privacy and use encryption and other means.'], [105, 'safemath', 'Check the use of SafeMath', 'Info', 'possibly', 'Pass', 'SafeMath library is used. It is good to use SafeMath, but if it is modified, it will also cause some loopholes. It should be noted that we call for the use of the safemath library, but care should be taken not to modify it at will.', 'pragma solidity 0.4.24;<br/>import "../libraries/SafeMath.sol";<br/>contract SafeSubAndDiv {<br/>&#160;&#160;&#160;&#160;using SafeMath for uint256;<br/>&#160;&#160;&#160;&#160;function sub(uint a, uint b) public returns(uint) {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return(a.sub(b));<br/>&#160;&#160;&#160;&#160;}<br/>}', '', 'Carefully check the relevant functions of the safemath library to ensure that there are no loopholes.'], [106, 'array-instead-bytes', 'The byte array can be replaced with bytes', 'Opt', 'exactly', 'Pass', 'byte[] can be converted to bytes to save gas resources.', 'pragma solidity 0.4.24;<br/>contract C {<br/>&#160;&#160;&#160;&#160;byte[] someVariable;<br/>&#160;&#160;&#160;&#160;...<br/>}', '', 'Replacing byte[] with bytes can save gas.'], [107, 'boolean-equal', 'Check comparison with boolean constant', 'Opt', 'exactly', 'Pass', "Check the comparison of Boolean constants. There is no need to compare with true and false, so it's superfluous (gas consumption).", 'contract A {<br/>&#160;&#160;&#160;&#160;function f(bool x) public {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// ...<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (x == true) { // bad!<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;   // ...<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// ...<br/>&#160;&#160;&#160;&#160;}<br/>}', 'Boolean constants can be used directly without comparison with true or false.', 'Delete the equation equal to the Boolean constant.'], [108, 'code-no-effects', 'Check for invalid codes', 'Opt', 'exactly', 'Pass', 'In Solidity, you can write code that does not produce the desired effect. Currently, the solidity compiler will not return warnings for invalid codes. This can lead to the introduction of "dead" code that cannot perform the expected actions correctly. For example, it is easy to omit the parentheses msg.sender.call.value(address(this).balance)("");, which may cause the function to continue execution without transferring funds to msg.sender.', "pragma solidity ^0.5.0;<br/>contract Wallet {<br/>&#160;&#160;&#160;&#160;mapping(address => uint) balance;<br/>&#160;&#160;&#160;&#160;// Withdraw funds from contract<br/>&#160;&#160;&#160;&#160;function withdraw(uint amount) public {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;require(amount <= balance[msg.sender], 'amount must be less than balance');<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uint previousBalance = balance[msg.sender];<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;balance[msg.sender] = previousBalance - amount;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// Attempt to send amount from the contract to msg.sender<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;msg.sender.call.value(amount);<br/>&#160;&#160;&#160;&#160;}<br/>}", '', 'This code is "dead" code and will not execute successfully, so please modify or delete it.'], [109, 'constable-states', 'State variables can be declared as constants', 'Opt', 'exactly', 'Pass', 'Constant state variables should be declared as constants to save gas.', 'contract B {<br/>&#160;&#160;&#160;&#160;address public mySistersAddress = 0x999999cf1046e68e36E1aA2E0E07105eDDD1f08E;<br/>&#160;&#160;&#160;&#160;function setUsed(uint a) public {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (msg.sender == MY_ADDRESS) {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;used = a;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;myFriendsAddress = 0xc0ffee254729296a45a3885639AC7E10F9d54980;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;}<br/>}', '', 'Add the constant attribute to the state variable that never changes.'], [110, 'event-before-revert', 'Check if event is called before revert', 'Opt', 'exactly', 'Pass', 'The event is called before the exception is thrown, and the Revert rollback will make the event waste gas.', 'contract Callbeforerevert {<br/>&#160;&#160;&#160;&#160;address owner;<br/>&#160;&#160;&#160;&#160;event EventName(address bidder, uint amount);<br/>&#160;&#160;&#160;&#160;function bad() public {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;emit EventName(msg.sender, msg.value); <br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;revert();<br/>&#160;&#160;&#160;&#160;}<br/>}', '', 'Check the logical structure of the contract function, the event event will be rolled back, so there is no need to delete it to save gas.'], [111, 'external-function', 'Public functions can be declared as external', 'Opt', 'exactly', 'Pass', 'Functions with public visibility modifiers are not called internally. Changing the visibility level to an external level can improve the readability of the code. In addition, in many cases, functions that use external visibility modifiers cost less gas than functions that use public visibility modifiers.', 'contract ContractWithFunctionCalledSuper {<br/>&#160;&#160;&#160;&#160;function callWithSuper() {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uint256 i = 0;<br/>&#160;&#160;&#160;&#160;}<br/>}', 'The callWithSuper() function can be declared as external visibility.', 'Use the "external" attribute for functions that are never called from within the contract.'], [112, 'extra-gas-inloops', 'Check for additional gas consumption', 'Opt', 'exactly', 'Pass', 'Use non-memory array state variables .balance or .length under the condition of for loop or while loop. In this case, each iteration of the loop will consume additional gas.', 'contract NewContract {<br/>&#160;&#160;&#160;&#160;uint[] ss;<br/>&#160;&#160;&#160;&#160;function longLoop() {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for(uint i = 0; i < ss.length; i++) {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uint a = ss[i];<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* ... */<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;}<br/>}', '', 'When .balance or .length is unchanged, it can be stored in a variable and then put in the loop condition to save gas.'], [113, 'missing-inheritance', 'Detect lost inheritance', 'Opt', 'exactly', 'Pass', 'Detect lost inheritance.', 'interface ISomething {<br/>&#160;&#160;&#160;&#160;function f1() external returns(uint);<br/>}<br/>contract Something {<br/>&#160;&#160;&#160;&#160;function f1() external returns(uint){<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return 42;<br/>&#160;&#160;&#160;&#160;}<br/>}', 'Some things should inherit from ISomething.', 'Add the corresponding inheritance.'], [114, 'redundant-statements', 'Detect the use of invalid sentences', 'Opt', 'exactly', 'Pass', 'Detect the use of invalid statements.', 'contract RedundantStatementsContract {<br/>&#160;&#160;&#160;&#160;constructor() public {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uint; // Elementary Type Name<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;bool; // Elementary Type Name<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RedundantStatementsContract; // Identifier<br/>&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;function test() public returns (uint) {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;uint; // Elementary Type Name<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;assert; // Identifier<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;test; // Identifier<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return 777;<br/>&#160;&#160;&#160;&#160;}<br/>}', 'Each comment line references the type/identifier, but does nothing on it, so no code is generated for such statements, so it can be deleted.', 'If extra statements congest the code but have no value, delete them.'], [115, 'return-struct', 'Multiple return values (struct)', 'Opt', 'exactly', 'Pass', 'Consider using struct instead of multiple return values for internal or private functions, it can improve the readability of the code. Function to pass multiple values using struct.', 'pragma solidity 0.4.24;<br/>contract TestContract {<br/>&#160;&#160;&#160;&#160;function test() internal returns(uint a, address b, bool c, int d) {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;a = 1;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;b = msg.sender;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;c = true;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;d = 2;<br/>&#160;&#160;&#160;&#160;}<br/>}', '', 'Save multiple return values in the struct and then return, which can improve the readability of the code.'], [116, 'revert-require', 'Check Revert in if operation', 'Opt', 'exactly', 'Pass', 'if (condition) {revert(); or throw;} can be replaced by require(condition) to save resources and gas.', 'contract Holder {<br/>&#160;&#160;&#160;&#160;uint public holdUntil;<br/>&#160;&#160;&#160;&#160;address public holder;<br/>&#160;&#160;&#160;&#160;function withdraw (uint a, uint b) external {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (now < holdUntil){<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;revert();<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;holder.transfer(this.balance);<br/>&#160;&#160;&#160;&#160;}<br/>}', '', 'Use require(condition) instead of constructing if (condition) {revert(); or throw;}.'], [117, 'send-transfer', 'Check Transfe to replace Send', 'Opt', 'exactly', 'Pass', 'The recommended way to perform the check of Ether payment is addr.transfer(x). If the transfer fails, an exception is automatically raised.', 'if(!addr.send(42 ether)) {<br/>&#160;&#160;&#160;&#160;revert();<br/>}', '', 'It is safer to use transfer instead of send.'], [118, 'unused-state', 'Check unused state variables', 'Opt', 'exactly', 'Pass', 'Unused variables are allowed in Solidity, and they do not pose direct security issues. The best practice is to avoid them as much as possible: resulting in increased calculations (and unnecessary gas consumption) means errors or incorrect data structures, and usually means poor code quality leads to code noise and reduces code readability.', 'contract A{<br/>&#160;&#160;&#160;&#160;address unused;<br/>&#160;&#160;&#160;&#160;address public unused2;<br/>&#160;&#160;&#160;&#160;address private unused3;<br/>&#160;&#160;&#160;&#160;address unused4;<br/>&#160;&#160;&#160;&#160;address used;<br/>&#160;&#160;&#160;&#160;function ceshi1 () external{<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;unused3 = address(0);<br/>&#160;&#160;&#160;&#160;}<br/>}', '', 'Delete unused state variables.'], [119, 'costly-operations-loop', 'Expensive operations in the loop', 'Opt', 'probably', 'Pass', 'Expensive operations within the loop.', 'contract CostlyOperationsInLoop{<br/>&#160;&#160;&#160;&#160;uint loop_count = 100;<br/>&#160;&#160;&#160;&#160;uint state_variable=0;<br/>&#160;&#160;&#160;&#160;function bad() external{<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;for (uint i=0; i < loop_count; i++){<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;state_variable++;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;}<br/>&#160;&#160;&#160;&#160;function good() external{<br/>&#160;&#160;&#160;&#160;  uint local_variable = state_variable;<br/>&#160;&#160;&#160;&#160;  for (uint i=0; i < loop_count; i++){<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;local_variable++;<br/>&#160;&#160;&#160;&#160;  }<br/>&#160;&#160;&#160;&#160;  state_variable = local_variable;<br/>&#160;&#160;&#160;&#160;}<br/>}', 'Due to the expensive SSTOREs, the incremental state variables in the loop will generate a large amount of gas, which may result in insufficient gas.', 'This test is a state variable in the loop. The state variable costs more gas than the local variable. This was not tested before, and only length was tested before.']]

	def draw_pie(self, data=[], labels=[], use_colors=[]):
	    d = Drawing(500,230)
	    pie = Pie()
	    pie.x = 70 
	    pie.y = 5
	    pie.slices.label_boxStrokeColor = colors.white  

	    pie.data = data     
	    pie.labels = labels  
	    pie.simpleLabels = 0 
	    pie.sameRadii = 1   

	    pie.strokeWidth=0.5                       
	    pie.strokeColor= colors.white             
	#     pie.slices.label_pointer_piePad = 10      
	#     pie.slices.label_pointer_edgePad = 25    
	    pie.width = 180
	    pie.height = 180
	#     pie.direction = 'clockwise'
	    pie.pointerLabelMode  = 'LeftRight'
	#     print(dir(pie))
	    lg = Legend()
	    lg.x = 315
	    lg.y = 150
	    lg.dx = 20
	    lg.dy = 20
	    lg.deltax = 20
	    lg.deltay = 15
	    lg.dxTextSpace = 20
	    lg.columnMaximum = 6
	    lg.fontName = 'roman' 
	    lg.fontSize = 10.5
	    lg.colorNamePairs = list(zip(use_colors,labels))
	    lg.alignment = 'left'
	    lg.strokeColor = colors.white 
	#     d.add(lab)
	    pie.slices.strokeColor = colors.white
	    pie.slices.strokeWidth = 0.5
	    for i in range(len(labels)):
	        pie.slices[i].fontName = 'roman' 
	        pie.slices[i].labelRadius = 0.6
	    for i, col in enumerate(use_colors):
	        pie.slices[i].fillColor  = col
	    lab = Label()
	    lab.x = 230  
	    lab.y = 210
	    lab.setText('Vulnerability severity distribution map')
	    lab.fontName = 'hei' 
	#     lab.boxFillColor=colors.HexColor(0x330066)
	#     print(dir(lab))
	    lab.fontSize = 15
	    d.add(lab)    
	    d.add(lg)
	    d.add(pie)
	    d.background = Rect(0,0,448,230,strokeWidth=1,strokeColor="#868686",fillColor=None) 
	    return d

	# def __init__(self):
	# 	"""
		
	# 	"""
		

	def _output(self, result_maps, filename, time_start_para, auditcontent, report_path, contracts_names, auditid_para):
		global time_start, auditid
		time_start = time_start_para
		auditid = auditid_para

		story = []
		story.append(PageBreak())
		story.append(Paragraph("0x01 Summary Information", self.title_style))
		if '月' in time.strftime('%b', time_start):
			story.append(Paragraph("The SmartFast (SF, for short) platform received this smart contract security audit application and audited the contract in "+month_convert[time.strftime('%b', time_start)]+" "+time.strftime('%Y', time_start)+".", self.content_style))
		else:
			story.append(Paragraph("The SmartFast (SF, for short) platform received this smart contract security audit application and audited the contract in "+time.strftime('%b', time_start)+" "+time.strftime('%Y', time_start)+".", self.content_style))
		story.append(Paragraph('It is necessary to declare that SF only issues this report in respect of facts that have occurred or existed before the issuance of this report, and undertakes corresponding responsibilities for this. For the facts that occur or exist in the future, SF is unable to judge the security status of its smart contract, and will not be responsible for it. The security audit analysis and other content made in this report are based on the documents and information provided to smart analysis team by the information provider as of the issuance of this report (referred to as "provided information"). SF hypothesis: There is no missing, tampered, deleted or concealed information in the mentioned information. If the information that has been mentioned is missing, tampered with, deleted, concealed or reflected does not match the actual situation, SmartFast shall not be liable for any losses and adverse effects caused thereby.', self.content_style))

		story.append(Spacer(1, 1.5 * mm))
		story.append(Paragraph("Table 1 Contract audit information", self.table_title_style))

		contracts_names_str = ""
		if len(contracts_names) > 3:
			contracts_names_str = contracts_names[0] + "," + contracts_names[1] + "," + contracts_names[2] + ",..."
		else:
			contracts_names_str = ','.join(contracts_names)

		task_data = [['Project','Description'],['Contract name',contracts_names_str],['Contract type','Ethereum contract'],['Code language','Solidity'],['Contract files',filename.split('/')[-1]],['Contract address',''],['Auditors','SmartFast team'],['Audit time',time.strftime("%Y-%m-%d %H:%M:%S", time_start)],['Audit tool','SmartFast（SF）']]
		task_table = Table(task_data, colWidths=[83 * mm, 83 * mm], rowHeights=9 * mm, style=self.common_style)
		story.append(task_table)
		story.append(Spacer(1, 2 * mm))
		story.append(Paragraph("Table 1 shows the relevant information of this contract audit in detail. The details and results of the contract security audit will be introduced in detail below.", self.content_style))

		story.append(Paragraph("0x02 Contract Audit Results", self.title_style))
		story.append(Paragraph("2.1 Vulnerability Distribution", self.sub_title_style))
		story.append(Paragraph("The severity of vulnerabilities in this security audit is distributed according to the level of danger:", self.content_style))
		story.append(Paragraph("Table 2 Overview of contract audit vulnerability distribution", self.table_title_style))

		loophole_distribute = {'High':0,'Medium':0,'Low':0,'Informational':0,'Optimization':0}
		result_number_color = {}
		for i in range(1,len(self.table_result)):
		    if self.table_result[i][1] in result_maps.keys():
		        loophole_distribute_val = {'High':0,'Medium':0,'Low':0,'Informational':0,'Optimization':0}
		        for v in result_maps[self.table_result[i][1]]:
		            loophole_distribute_val[v['impact']] = loophole_distribute_val[v['impact']] + 1
		        numberimpact = ""
		        numberimpact_nocolor = ""
		        if loophole_distribute_val['High'] != 0:
		            loophole_distribute['High'] = loophole_distribute['High'] + loophole_distribute_val['High']
		            if numberimpact == '':
		                numberimpact = '<font color="#E61A1A">High:' + str(loophole_distribute_val['High']) + '</font>'
		                numberimpact_nocolor = 'High:' + str(loophole_distribute_val['High'])
		            else:
		                numberimpact = numberimpact + '\\<font color="#E61A1A ">High:' + str(loophole_distribute_val['High']) + '</font>'
		                numberimpact_nocolor = numberimpact_nocolor + '\\High:' + str(loophole_distribute_val['High'])
		        if loophole_distribute_val['Medium'] != 0:
		            loophole_distribute['Medium'] = loophole_distribute['Medium'] + loophole_distribute_val['Medium']
		            if numberimpact == '':
		                numberimpact = '<font color="#FF6600">Medium:' + str(loophole_distribute_val['Medium']) + '</font>'
		                numberimpact_nocolor = 'Medium:' + str(loophole_distribute_val['Medium'])
		            else:
		                numberimpact = numberimpact + '\\<font color="#FF6600">Medium:' + str(loophole_distribute_val['Medium']) + '</font>'
		                numberimpact_nocolor = numberimpact_nocolor + '\\Medium:' + str(loophole_distribute_val['Medium'])
		        if loophole_distribute_val['Low'] != 0:
		            loophole_distribute['Low'] = loophole_distribute['Low'] + loophole_distribute_val['Low']
		            if numberimpact == '':
		                numberimpact = '<font color="#DDB822">Low:' + str(loophole_distribute_val['Low']) + '</font>'
		                numberimpact_nocolor = 'Low:' + str(loophole_distribute_val['Low'])
		            else:
		                numberimpact = numberimpact + '\\<font color="#DDB822">Low:' + str(loophole_distribute_val['Low']) + '</font>'
		                numberimpact_nocolor = numberimpact_nocolor + '\\Low:' + str(loophole_distribute_val['Low'])
		        if loophole_distribute_val['Informational'] != 0:
		            loophole_distribute['Informational'] = loophole_distribute['Informational'] + loophole_distribute_val['Informational']
		            if numberimpact == '':
		                numberimpact = '<font color="#ff66ff">Info:' + str(loophole_distribute_val['Informational']) + '</font>'
		                numberimpact_nocolor = 'Info:' + str(loophole_distribute_val['Informational'])
		            else:
		                numberimpact = numberimpact + '\\<font color="#ff66ff">Info:' + str(loophole_distribute_val['Informational']) + '</font>'
		                numberimpact_nocolor = numberimpact_nocolor + '\\Info:' + str(loophole_distribute_val['Informational'])
		        if loophole_distribute_val['Optimization'] != 0:
		            loophole_distribute['Optimization'] = loophole_distribute['Optimization'] + loophole_distribute_val['Optimization']
		            if numberimpact == '':
		                numberimpact = '<font color="#22DDDD">Opt:' + str(loophole_distribute_val['Optimization']) + '</font>'
		                numberimpact_nocolor = 'Opt:' + str(loophole_distribute_val['Optimization'])
		            else:
		                numberimpact = numberimpact + '\\<font color="#22DDDD">Opt:' + str(loophole_distribute_val['Optimization']) + '</font>'
		                numberimpact_nocolor = numberimpact_nocolor + '\\Opt:' + str(loophole_distribute_val['Optimization'])
		        self.table_result[i][5] = numberimpact_nocolor
		        result_number_color[self.table_result[i][1]] = numberimpact

		task_data_1 = [['Vulnerability security distribution'],['High','Medium','Low','Info','Opt'],[loophole_distribute['High'],loophole_distribute['Medium'],loophole_distribute['Low'],loophole_distribute['Informational'],loophole_distribute['Optimization']]]
		task_table_1 = Table(task_data_1, colWidths=[30 * mm, 30 * mm, 30 * mm, 30 * mm, 30 * mm], rowHeights=9 * mm, style=self.common_style_1)
		story.append(task_table_1)
		pie_data = task_data_1[2]
		pie_labs = task_data_1[1]
		pie_color = [colors.HexColor('#E61A1A'),colors.HexColor('#FF6600'),colors.HexColor('#DDB822'),colors.HexColor('#ff66ff'),colors.HexColor('#22DDDD')]
		task_pie = self.draw_pie(pie_data,pie_labs,pie_color)
		story.append(Spacer(1, 1.5 * mm))
		story.append(task_pie)
		story.append(Paragraph("Figure 1 Vulnerability security distribution map", self.graph_title_style))
		story.append(Paragraph("This security audit found "+str(loophole_distribute['High'])+" High-severity vulnerabilities, "+str(loophole_distribute['Medium'])+" Medium-severity vulnerabilities, "+str(loophole_distribute['Low'])+" Low-severity vulnerabilities, "+str(loophole_distribute['Optimization'])+" Optimization-severity vulnerabilities, and "+str(loophole_distribute['Informational'])+" places that need attention.", self.content_daoyin_style_red))
		story.append(Paragraph("2.2 Audit Results", self.sub_title_style))
		story.append(Paragraph("There are 119 test items in this security audit, and the test items are as follows (other unknown security vulnerabilities are not included in the scope of responsibility of this audit):", self.content_style))
		# common_style_result_all_type
		for i in range(1,len(self.table_result)):
		    if 'High' in self.table_result[i][3]:
		        self.common_style_result_all_type.append(('TEXTCOLOR', (3, i), (3, i), colors.HexColor('#E61A1A')))
		        if 'Pass' in self.table_result[i][5]:
		            self.common_style_result_all_type.append(('TEXTCOLOR', (5, i), (5, i), colors.HexColor('#2BD591')))
		        else:
		            self.common_style_result_all_type.append(('TEXTCOLOR', (5, i), (5, i), colors.HexColor('#E61A1A')))
		    elif 'Medium' in self.table_result[i][3]:
		        self.common_style_result_all_type.append(('TEXTCOLOR', (3, i), (3, i), colors.HexColor('#FF6600')))
		        if 'Pass' in self.table_result[i][5]:
		            self.common_style_result_all_type.append(('TEXTCOLOR', (5, i), (5, i), colors.HexColor('#2BD591')))
		        else:
		            self.common_style_result_all_type.append(('TEXTCOLOR', (5, i), (5, i), colors.HexColor('#FF6600')))
		    elif 'Low' in self.table_result[i][3]:
		        self.common_style_result_all_type.append(('TEXTCOLOR', (3, i), (3, i), colors.HexColor('#DDB822')))
		        if 'Pass' in self.table_result[i][5]:
		            self.common_style_result_all_type.append(('TEXTCOLOR', (5, i), (5, i), colors.HexColor('#2BD591')))
		        else:
		            self.common_style_result_all_type.append(('TEXTCOLOR', (5, i), (5, i), colors.HexColor('#DDB822')))
		    elif 'Info' in self.table_result[i][3]:
		        self.common_style_result_all_type.append(('TEXTCOLOR', (3, i), (3, i), colors.HexColor('#ff66ff')))
		        if 'Pass' in self.table_result[i][5]:
		            self.common_style_result_all_type.append(('TEXTCOLOR', (5, i), (5, i), colors.HexColor('#2BD591')))
		        else:
		            self.common_style_result_all_type.append(('TEXTCOLOR', (5, i), (5, i), colors.HexColor('#ff66ff')))
		    elif 'Opt' in self.table_result[i][3]:
		        self.common_style_result_all_type.append(('TEXTCOLOR', (3, i), (3, i), colors.HexColor('#22DDDD')))
		        if 'Pass' in self.table_result[i][5]:
		            self.common_style_result_all_type.append(('TEXTCOLOR', (5, i), (5, i), colors.HexColor('#2BD591')))
		        else:
		            self.common_style_result_all_type.append(('TEXTCOLOR', (5, i), (5, i), colors.HexColor('#22DDDD')))
		    if i%2==1:
		        self.common_style_result_all_type.append(('BACKGROUND', (0, i), (-1, i), colors.HexColor('#d9e2f3')))
		common_style_result_all = TableStyle(self.common_style_result_all_type)
		story.append(Paragraph("Table 3 Contract audit items", self.table_title_style))
		task_table_2 = Table([var[0:6] for var in self.table_result], colWidths=[8 * mm, 47 * mm, 70 * mm, 15 * mm, 19 * mm, 20 * mm], rowHeights=7.5 * mm, style=common_style_result_all)
		story.append(task_table_2)

		story.append(Paragraph("0x03 Contract Code", self.title_style))
		story.append(Paragraph("3.1 Code and Vulnerability Lables", self.sub_title_style))
		story.append(Paragraph("In the corresponding position of each contract code, security vulnerabilities and coding specification issues have been marked in the form of comments. The comment labels start with //StFt. For details, please refer to the following contract code content.", self.content_style))
		story.append(Paragraph(auditcontent, self.code_style))

		story.append(Paragraph("0x04 Contract Audit Details", self.title_style))
		for i in range(1,len(self.table_result)):
		    story.append(Paragraph('<font style="font-weight:bold">4.'+str(i)+' '+self.table_result[i][1]+'</font>', self.sub_title_style_romanbold))
		    if 'Pass' in self.table_result[i][5]:
	
		        story.append(Paragraph("Vulnerability description", self.sub_sub_title_style))
		        story.append(Paragraph(self.table_result[i][6], self.content_style))
		        story.append(Paragraph("Applicable scenarios", self.sub_sub_title_style))
		        story.append(Paragraph(self.table_result[i][7], self.code_style))
		        if self.table_result[i][8]:
		            story.append(Paragraph(self.table_result[i][8], self.content_style_codeadd))
		        story.append(Paragraph('Audit results:<font color="#2BD591">【Pass】</font>', self.sub_sub_title_style))
		        story.append(Paragraph('Security advice: none.', self.sub_sub_title_style))
		    else:

		        story.append(Paragraph("Vulnerability description", self.sub_sub_title_style))
		        story.append(Paragraph(self.table_result[i][6], self.content_style))
		        story.append(Paragraph('Applicable scenarios：【'+result_number_color[self.table_result[i][1]]+'】', self.sub_sub_title_style))
		        story.append(Paragraph("For this pattern, the specific problems in the contract are as follows:", self.content_style))
		        for v in result_maps[self.table_result[i][1]]:
		            if v['impact'] == 'High':
		                description_vals = v['description'].replace("\t","&#160;&#160;&#160;&#160;").split('\n')
		                story.append(Paragraph('<font color="#E61A1A" face="roman">(High)</font>'+description_vals[0], self.content_style_roman))
		                for j in range(1,len(description_vals)):
		                    story.append(Paragraph(description_vals[j], self.content_style_roman))
		            elif v['impact'] == 'Medium':
		                description_vals = v['description'].replace("\t","&#160;&#160;&#160;&#160;").split('\n')
		                story.append(Paragraph('<font color="#FF6600" face="roman">(Medium)</font>'+description_vals[0], self.content_style_roman))
		                for j in range(1,len(description_vals)):
		                    story.append(Paragraph(description_vals[j], self.content_style_roman))
		            elif v['impact'] == 'Low':
		                description_vals = v['description'].replace("\t","&#160;&#160;&#160;&#160;").split('\n')
		                story.append(Paragraph('<font color="#DDB822" face="roman">(Low)</font>'+description_vals[0], self.content_style_roman))
		                for j in range(1,len(description_vals)):
		                    story.append(Paragraph(description_vals[j], self.content_style_roman))
		            elif v['impact'] == 'Informational':
		                description_vals = v['description'].replace("\t","&#160;&#160;&#160;&#160;").split('\n')
		                story.append(Paragraph('<font color="#ff66ff" face="roman">(Informational)</font>'+description_vals[0], self.content_style_roman))
		                for j in range(1,len(description_vals)):
		                    story.append(Paragraph(description_vals[j], self.content_style_roman))              
		            elif v['impact'] == 'Optimization':
		                description_vals = v['description'].replace("\t","&#160;&#160;&#160;&#160;").split('\n')
		                story.append(Paragraph('<font color="#22DDDD" face="roman">(Optimization)</font>'+description_vals[0], self.content_style_roman))
		                for j in range(1,len(description_vals)):
		                    story.append(Paragraph(description_vals[j], self.content_style_roman))
		        story.append(Paragraph('Security advice', self.sub_sub_title_style))
		        story.append(Paragraph(self.table_result[i][9], self.content_style))
		# story.append(c)
		story.append(PageBreak())

		story.append(Spacer(0, 20 * mm))
		doc = SimpleDocTemplate(report_path,
		                        pagesize=A4,
		                        leftMargin=20 * mm, rightMargin=20 * mm, topMargin=27 * mm, bottomMargin=25 * mm)
		# print("1233333333333333333333333333333333")
		doc.build(story,canvasmaker=NumberedCanvasEnglish)
		print("The audit report has been saved to "+report_path+".")
	
	#output the main audit result
	def _output_main(self, result_maps, filename, time_start_para, auditcontent, report_path, contracts_names, auditid_para):
		global time_start, auditid
		time_start = time_start_para
		auditid = auditid_para

		story = []
		story.append(PageBreak())
		story.append(Paragraph("0x01 Summary Information", self.title_style))
		if '月' in time.strftime('%b', time_start):
			story.append(Paragraph("The SmartFast (SF, for short) platform received this smart contract security audit application and audited the contract in "+month_convert[time.strftime('%b', time_start)]+" "+time.strftime('%Y', time_start)+".", self.content_style))
		else:
			story.append(Paragraph("The SmartFast (SF, for short) platform received this smart contract security audit application and audited the contract in "+time.strftime('%b', time_start)+" "+time.strftime('%Y', time_start)+".", self.content_style))
		story.append(Paragraph('It is necessary to declare that SF only issues this report in respect of facts that have occurred or existed before the issuance of this report, and undertakes corresponding responsibilities for this. For the facts that occur or exist in the future, SF is unable to judge the security status of its smart contract, and will not be responsible for it. The security audit analysis and other content made in this report are based on the documents and information provided to smart analysis team by the information provider as of the issuance of this report (referred to as "provided information"). SF hypothesis: There is no missing, tampered, deleted or concealed information in the mentioned information. If the information that has been mentioned is missing, tampered with, deleted, concealed or reflected does not match the actual situation, SmartFast shall not be liable for any losses and adverse effects caused thereby.', self.content_style))

		story.append(Spacer(1, 1.5 * mm))
		story.append(Paragraph("Table 1 Contract audit information", self.table_title_style))
		contracts_names_str = ""
		if len(contracts_names) > 3:
			contracts_names_str = contracts_names[0] + "," + contracts_names[1] + "," + contracts_names[2] + ",..."
		else:
			contracts_names_str = ','.join(contracts_names)
		task_data = [['Project','Description'],['Contract name',contracts_names_str],['Contract type','Ethereum contract'],['Code language','Solidity'],['Contract files',filename.split('/')[-1]],['Contract address',''],['Auditors','SmartFast team'],['Audit time',time.strftime("%Y-%m-%d %H:%M:%S", time_start)],['Audit tool','SmartFast（SF）']]
		task_table = Table(task_data, colWidths=[83 * mm, 83 * mm], rowHeights=9 * mm, style=self.common_style)
		story.append(task_table)
		story.append(Spacer(1, 2 * mm))
		story.append(Paragraph("Table 1 shows the relevant information of this contract audit in detail. The details and results of the contract security audit will be introduced in detail below.", self.content_style))

		story.append(Paragraph("0x02 Contract Audit Results", self.title_style))
		story.append(Paragraph("2.1 Vulnerability Distribution", self.sub_title_style))
		story.append(Paragraph("The severity of vulnerabilities in this security audit is distributed according to the level of danger:", self.content_style))
		story.append(Paragraph("Table 2 Overview of contract audit vulnerability distribution", self.table_title_style))

		loophole_distribute = {'High':0,'Medium':0,'Low':0,'Informational':0,'Optimization':0}
		result_number_color = {}
		for i in range(1,len(self.table_result)):
		    if self.table_result[i][1] in result_maps.keys():
		        loophole_distribute_val = {'High':0,'Medium':0,'Low':0,'Informational':0,'Optimization':0}
		        for v in result_maps[self.table_result[i][1]]:
		            loophole_distribute_val[v['impact']] = loophole_distribute_val[v['impact']] + 1
		        numberimpact = ""
		        numberimpact_nocolor = ""
		        if loophole_distribute_val['High'] != 0:
		            loophole_distribute['High'] = loophole_distribute['High'] + loophole_distribute_val['High']
		            if numberimpact == '':
		                numberimpact = '<font color="#E61A1A">High:' + str(loophole_distribute_val['High']) + '</font>'
		                numberimpact_nocolor = 'High:' + str(loophole_distribute_val['High'])
		            else:
		                numberimpact = numberimpact + '\\<font color="#E61A1A ">High:' + str(loophole_distribute_val['High']) + '</font>'
		                numberimpact_nocolor = numberimpact_nocolor + '\\High:' + str(loophole_distribute_val['High'])
		        if loophole_distribute_val['Medium'] != 0:
		            loophole_distribute['Medium'] = loophole_distribute['Medium'] + loophole_distribute_val['Medium']
		            if numberimpact == '':
		                numberimpact = '<font color="#FF6600">Medium:' + str(loophole_distribute_val['Medium']) + '</font>'
		                numberimpact_nocolor = 'Medium:' + str(loophole_distribute_val['Medium'])
		            else:
		                numberimpact = numberimpact + '\\<font color="#FF6600">Medium:' + str(loophole_distribute_val['Medium']) + '</font>'
		                numberimpact_nocolor = numberimpact_nocolor + '\\Medium:' + str(loophole_distribute_val['Medium'])
		        if loophole_distribute_val['Low'] != 0:
		            loophole_distribute['Low'] = loophole_distribute['Low'] + loophole_distribute_val['Low']
		            if numberimpact == '':
		                numberimpact = '<font color="#DDB822">Low:' + str(loophole_distribute_val['Low']) + '</font>'
		                numberimpact_nocolor = 'Low:' + str(loophole_distribute_val['Low'])
		            else:
		                numberimpact = numberimpact + '\\<font color="#DDB822">Low:' + str(loophole_distribute_val['Low']) + '</font>'
		                numberimpact_nocolor = numberimpact_nocolor + '\\Low:' + str(loophole_distribute_val['Low'])
		        if loophole_distribute_val['Informational'] != 0:
		            loophole_distribute['Informational'] = loophole_distribute['Informational'] + loophole_distribute_val['Informational']
		            if numberimpact == '':
		                numberimpact = '<font color="#ff66ff">Info:' + str(loophole_distribute_val['Informational']) + '</font>'
		                numberimpact_nocolor = 'Info:' + str(loophole_distribute_val['Informational'])
		            else:
		                numberimpact = numberimpact + '\\<font color="#ff66ff">Info:' + str(loophole_distribute_val['Informational']) + '</font>'
		                numberimpact_nocolor = numberimpact_nocolor + '\\Info:' + str(loophole_distribute_val['Informational'])
		        if loophole_distribute_val['Optimization'] != 0:
		            loophole_distribute['Optimization'] = loophole_distribute['Optimization'] + loophole_distribute_val['Optimization']
		            if numberimpact == '':
		                numberimpact = '<font color="#22DDDD">Opt:' + str(loophole_distribute_val['Optimization']) + '</font>'
		                numberimpact_nocolor = 'Opt:' + str(loophole_distribute_val['Optimization'])
		            else:
		                numberimpact = numberimpact + '\\<font color="#22DDDD">Opt:' + str(loophole_distribute_val['Optimization']) + '</font>'
		                numberimpact_nocolor = numberimpact_nocolor + '\\Opt:' + str(loophole_distribute_val['Optimization'])
		        self.table_result[i][5] = numberimpact_nocolor
		        result_number_color[self.table_result[i][1]] = numberimpact

		task_data_1 = [['Vulnerability security distribution'],['High','Medium','Low','Info','Opt'],[loophole_distribute['High'],loophole_distribute['Medium'],loophole_distribute['Low'],loophole_distribute['Informational'],loophole_distribute['Optimization']]]
		task_table_1 = Table(task_data_1, colWidths=[30 * mm, 30 * mm, 30 * mm, 30 * mm, 30 * mm], rowHeights=9 * mm, style=self.common_style_1)
		story.append(task_table_1)
		pie_data = task_data_1[2]
		pie_labs = task_data_1[1]
		pie_color = [colors.HexColor('#E61A1A'),colors.HexColor('#FF6600'),colors.HexColor('#DDB822'),colors.HexColor('#ff66ff'),colors.HexColor('#22DDDD')]
		task_pie = self.draw_pie(pie_data,pie_labs,pie_color)
		story.append(Spacer(1, 1.5 * mm))
		story.append(task_pie)
		story.append(Paragraph("Figure 1 Vulnerability security distribution map", self.graph_title_style))
		story.append(Paragraph("This security audit found "+str(loophole_distribute['High'])+" High-severity vulnerabilities, "+str(loophole_distribute['Medium'])+" Medium-severity vulnerabilities, "+str(loophole_distribute['Low'])+" Low-severity vulnerabilities, "+str(loophole_distribute['Optimization'])+" Optimization-severity vulnerabilities, and "+str(loophole_distribute['Informational'])+" places that need attention.", self.content_daoyin_style_red))
		story.append(Paragraph("2.2 Audit Results", self.sub_title_style))
		story.append(Paragraph("There are 119 test items in this security audit, and the test items are as follows (other unknown security vulnerabilities are not included in the scope of responsibility of this audit):", self.content_style))
		# common_style_result_all_type
		for i in range(1,len(self.table_result)):
		    if 'High' in self.table_result[i][3]:
		        self.common_style_result_all_type.append(('TEXTCOLOR', (3, i), (3, i), colors.HexColor('#E61A1A')))
		        if 'Pass' in self.table_result[i][5]:
		            self.common_style_result_all_type.append(('TEXTCOLOR', (5, i), (5, i), colors.HexColor('#2BD591')))
		        else:
		            self.common_style_result_all_type.append(('TEXTCOLOR', (5, i), (5, i), colors.HexColor('#E61A1A')))
		    elif 'Medium' in self.table_result[i][3]:
		        self.common_style_result_all_type.append(('TEXTCOLOR', (3, i), (3, i), colors.HexColor('#FF6600')))
		        if 'Pass' in self.table_result[i][5]:
		            self.common_style_result_all_type.append(('TEXTCOLOR', (5, i), (5, i), colors.HexColor('#2BD591')))
		        else:
		            self.common_style_result_all_type.append(('TEXTCOLOR', (5, i), (5, i), colors.HexColor('#FF6600')))
		    elif 'Low' in self.table_result[i][3]:
		        self.common_style_result_all_type.append(('TEXTCOLOR', (3, i), (3, i), colors.HexColor('#DDB822')))
		        if 'Pass' in self.table_result[i][5]:
		            self.common_style_result_all_type.append(('TEXTCOLOR', (5, i), (5, i), colors.HexColor('#2BD591')))
		        else:
		            self.common_style_result_all_type.append(('TEXTCOLOR', (5, i), (5, i), colors.HexColor('#DDB822')))
		    elif 'Info' in self.table_result[i][3]:
		        self.common_style_result_all_type.append(('TEXTCOLOR', (3, i), (3, i), colors.HexColor('#ff66ff')))
		        if 'Pass' in self.table_result[i][5]:
		            self.common_style_result_all_type.append(('TEXTCOLOR', (5, i), (5, i), colors.HexColor('#2BD591')))
		        else:
		            self.common_style_result_all_type.append(('TEXTCOLOR', (5, i), (5, i), colors.HexColor('#ff66ff')))
		    elif 'Opt' in self.table_result[i][3]:
		        self.common_style_result_all_type.append(('TEXTCOLOR', (3, i), (3, i), colors.HexColor('#22DDDD')))
		        if 'Pass' in self.table_result[i][5]:
		            self.common_style_result_all_type.append(('TEXTCOLOR', (5, i), (5, i), colors.HexColor('#2BD591')))
		        else:
		            self.common_style_result_all_type.append(('TEXTCOLOR', (5, i), (5, i), colors.HexColor('#22DDDD')))
		    if i%2==1:
		        self.common_style_result_all_type.append(('BACKGROUND', (0, i), (-1, i), colors.HexColor('#d9e2f3')))
		common_style_result_all = TableStyle(self.common_style_result_all_type)
		story.append(Paragraph("Table 3 Contract audit items", self.table_title_style))
		# task_table_2 = Table([var[0:6] for var in self.table_result], colWidths=[10 * mm, 50 * mm, 60 * mm, 18 * mm, 19 * mm, 22 * mm], rowHeights=7.5 * mm, style=common_style_result_all)
		task_table_2 = Table([var[0:6] for var in self.table_result], colWidths=[8 * mm, 47 * mm, 70 * mm, 15 * mm, 19 * mm, 20 * mm], rowHeights=7.5 * mm, style=common_style_result_all)
		story.append(task_table_2)

		story.append(Paragraph("0x03 Contract Code", self.title_style))
		story.append(Paragraph("3.1 Code and Vulnerability Lables", self.sub_title_style))
		story.append(Paragraph("In the corresponding position of each contract code, security vulnerabilities and coding specification issues have been marked in the form of comments. The comment labels start with //StFt. For details, please refer to the following contract code content.", self.content_style))
		story.append(Paragraph(auditcontent, self.code_style))

		story.append(Paragraph("0x04 Contract Audit Details", self.title_style))
		num = 1
		for i in range(1,len(self.table_result)):
		    if 'Pass' not in self.table_result[i][5]:
		       	story.append(Paragraph('<font style="font-weight:bold">4.'+str(num)+' '+self.table_result[i][1]+'</font>', self.sub_title_style_romanbold))
		        story.append(Paragraph("Vulnerability description", self.sub_sub_title_style))
		        story.append(Paragraph(self.table_result[i][6], self.content_style))
		        story.append(Paragraph('Audit results: 【'+result_number_color[self.table_result[i][1]]+'】', self.sub_sub_title_style))
		        story.append(Paragraph("For this pattern, the specific problems in the contract are as follows: ", self.content_style))
		        for v in result_maps[self.table_result[i][1]]:
		            if v['impact'] == 'High':
		                description_vals = v['description'].replace("\t","&#160;&#160;&#160;&#160;").split('\n')
		                story.append(Paragraph('<font color="#E61A1A" face="roman">(High)</font>'+description_vals[0], self.content_style_roman))
		                for j in range(1,len(description_vals)):
		                    story.append(Paragraph(description_vals[j], self.content_style_roman))
		            elif v['impact'] == 'Medium':
		                description_vals = v['description'].replace("\t","&#160;&#160;&#160;&#160;").split('\n')
		                story.append(Paragraph('<font color="#FF6600" face="roman">(Medium)</font>'+description_vals[0], self.content_style_roman))
		                for j in range(1,len(description_vals)):
		                    story.append(Paragraph(description_vals[j], self.content_style_roman))
		            elif v['impact'] == 'Low':
		                description_vals = v['description'].replace("\t","&#160;&#160;&#160;&#160;").split('\n')
		                story.append(Paragraph('<font color="#DDB822" face="roman">(Low)</font>'+description_vals[0], self.content_style_roman))
		                for j in range(1,len(description_vals)):
		                    story.append(Paragraph(description_vals[j], self.content_style_roman))
		            elif v['impact'] == 'Informational':
		                description_vals = v['description'].replace("\t","&#160;&#160;&#160;&#160;").split('\n')
		                story.append(Paragraph('<font color="#ff66ff" face="roman">(Informational)</font>'+description_vals[0], self.content_style_roman))
		                for j in range(1,len(description_vals)):
		                    story.append(Paragraph(description_vals[j], self.content_style_roman))              
		            elif v['impact'] == 'Optimization':
		                description_vals = v['description'].replace("\t","&#160;&#160;&#160;&#160;").split('\n')
		                story.append(Paragraph('<font color="#22DDDD" face="roman">(Optimization)</font>'+description_vals[0], self.content_style_roman))
		                for j in range(1,len(description_vals)):
		                    story.append(Paragraph(description_vals[j], self.content_style_roman))
		        story.append(Paragraph('Security advice', self.sub_sub_title_style))
		        story.append(Paragraph(self.table_result[i][9], self.content_style))
		        num = num + 1
		# story.append(c)
		story.append(PageBreak())
		story.append(Spacer(0, 20 * mm))
	
		doc = SimpleDocTemplate(report_path,
		                        pagesize=A4,
		                        leftMargin=20 * mm, rightMargin=20 * mm, topMargin=27 * mm, bottomMargin=25 * mm)
		# print("1233333333333333333333333333333333")
		doc.build(story,canvasmaker=NumberedCanvasEnglish)
		print("The audit report has been saved to "+report_path+".")